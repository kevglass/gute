import { Bitmap } from "../Bitmap";
import { Font } from "../Font";
import { Graphics, Offscreen } from "../Graphics";
import { IOpenGLBitmap, NullBitmap } from "./OpenGLBitmap";
import { OpenGlOffscreen } from "./OpenGLOffscreen";
import { RenderingState } from "./RenderingState";
export declare function colToNumber(input: string): number;
export declare function getMaxTextureSize(): number;
export declare class OpenGLGraphicsImpl implements Graphics, RenderingState {
    static NULL_COPY: NullBitmap;
    canvas: HTMLCanvasElement;
    offscreen: Offscreen | null;
    gl: WebGLRenderingContext;
    extension?: ANGLE_instanced_arrays;
    images: IOpenGLBitmap[];
    atlasTextures: WebGLTexture[] | null;
    currentTexture: WebGLTexture | null;
    texWidth: number;
    texHeight: number;
    offscreenId: number;
    offscreens: OpenGlOffscreen[];
    loaded: boolean;
    arrayBuffer?: ArrayBuffer;
    shaderProgram?: WebGLProgram;
    glBuffer?: WebGLBuffer | null;
    maxDraws: number;
    positions?: Int16Array;
    rgbas?: Uint32Array;
    draws: number;
    clipX: number;
    clipY: number;
    clipX2: number;
    clipY2: number;
    alpha: number;
    currentContextState: RenderingState;
    transformCanvas: HTMLCanvasElement;
    transformCtx: CanvasRenderingContext2D;
    uniforms: Record<string, WebGLUniformLocation>;
    constructor();
    private lostContext;
    private recoverContext;
    private initGlResources;
    registerImage(bitmap: IOpenGLBitmap): void;
    newResourceLoaded(): void;
    initResourceOnLoaded(): void;
    resetState(): void;
    getUniformLoc(name: string): WebGLUniformLocation;
    resize(): void;
    getError(): string | undefined;
    _drawBitmap(img: IOpenGLBitmap, x: number, y: number, width: number, height: number, col?: number): void;
    _drawImage(texIndex: number, texX: number, texY: number, texWidth: number, texHeight: number, drawX: number, drawY: number, width: number, height: number, rgba: number, alpha: number): void;
    glStartContext(): void;
    glCommitContext(): void;
    renderStart(): void;
    renderEnd(): void;
    applyFont(): void;
    smooth(): void;
    copy(): Bitmap;
    getOffscreen(): Offscreen | null;
    clip(x: number, y: number, width: number, height: number): void;
    createOffscreen(): Offscreen;
    drawToOffscreen(screen: Offscreen | null): void;
    drawOffscreen(screen: Offscreen): void;
    drawScaledOffscreen(screen: Offscreen, x: number, y: number, width: number, height: number): void;
    fillRect(x: number, y: number, width: number, height: number, col: string): void;
    fillCircle(x: number, y: number, radius: number, col: string): void;
    drawCircle(x: number, y: number, radius: number, col: string, width: number): void;
    setLineDash(segments: number[]): void;
    drawLine(x1: number, y1: number, x2: number, y2: number, col: string, width?: number | undefined): void;
    drawBitmap(x: number, y: number, bitmap: Bitmap): void;
    drawScaledBitmap(x: number, y: number, width: number, height: number, bitmap: Bitmap): void;
    clearRect(x: number, y: number, width: number, height: number): void;
    clear(): void;
    setFont(font: Font): void;
    setComposite(name: string): void;
    setFontSize(size: number): void;
    drawString(x: number, y: number, text: string, col: string): void;
    translate(x: number, y: number): void;
    scale(x: number, y: number): void;
    push(): void;
    pop(): void;
    getWidth(): number;
    getHeight(): number;
    fitScreen(pixelScale: number): void;
    getStringWidth(text: string): number;
    setAlpha(alpha: number): void;
    getTransform(): DOMMatrix;
}
