!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.gute=e():t.gute=e()}(self,(function(){return(()=>{"use strict";var t={876:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BLUE=e.GREEN=e.RED=e.BLACK=e.WHITE=void 0,e.WHITE="white",e.BLACK="black",e.RED="red",e.GREEN="green",e.BLUE="blue"},634:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.startGame=e.setMusicOn=e.setSoundOn=e.isMusicOn=e.isSoundOn=void 0;var n=i(677),o=i(974),r=i(380),s=i(233),a=i(52),h=i(181),u=!0,l=!0;e.isSoundOn=function(){return u},e.isMusicOn=function(){return l},e.setSoundOn=function(t){u=t},e.setMusicOn=function(t){!t&&l&&(l=!1,s.SoundImpl.CURRENT_MUSIC&&s.SoundImpl.CURRENT_MUSIC.stop()),t&&!l&&(l=!0,s.SoundImpl.CURRENT_MUSIC&&s.SoundImpl.CURRENT_MUSIC.play(s.SoundImpl.CURRENT_MUSIC.volume))},e.startGame=function(t){(new c).start(t)};var c=function(){function t(){this.resources=[],this.lastFrame=0,this.inited=!1}return t.prototype.getGraphics=function(){return this.graphics},t.prototype.resourcesRemaining=function(){return this.resources.filter((function(t){return!t.loaded})).length},t.prototype.resourcesTotal=function(){return this.resources.length},t.prototype.allResourcesLoaded=function(){for(var t=0,e=this.resources;t<e.length;t++)if(!e[t].loaded)return!1;return!0},t.prototype.initResourcesOnFirstClick=function(){if(this.allResourcesLoaded()&&!this.inited){this.inited=!0;for(var t=0,e=this.resources;t<e.length;t++)e[t].initOnFirstClick()}},t.prototype.mouseMoveHandler=function(t,e,i){void 0===i&&(i=0),this.initResourcesOnFirstClick();var n=this.graphics.canvas;n.focus();var o=n.clientWidth,r=n.clientHeight;t=Math.floor(t/o*n.width),e=Math.floor(e/r*n.height),this.game.onMouseMove(this,t,e)},t.prototype.mouseWheelHandler=function(t){this.game.onMouseWheel(this,t)},t.prototype.mouseDownHandler=function(t,e,i){void 0===i&&(i=0),this.initResourcesOnFirstClick();var n=this.graphics.canvas;n.focus();var o=n.clientWidth,r=n.clientHeight;t=Math.floor(t/o*n.width),e=Math.floor(e/r*n.height),this.game.onMouseDown(this,t,e,i)},t.prototype.mouseUpHandler=function(t,e,i){void 0===i&&(i=0),this.initResourcesOnFirstClick();var n=this.graphics.canvas,o=n.clientWidth,r=n.clientHeight;t=Math.floor(t/o*n.width),e=Math.floor(e/r*n.height),this.game.onMouseUp(this,t,e,i)},t.prototype.keyDownHandler=function(t){this.initResourcesOnFirstClick(),this.game.onKeyDown(this,t)},t.prototype.keyUpHandler=function(t){this.game.onKeyUp(this,t)},t.prototype.start=function(t){var e=this;return this.game=t,this.graphics=new r.GraphicsImpl,this.graphics.canvas.addEventListener("touchstart",(function(t){try{if(t.target){var i=t.target.getBoundingClientRect(),n=t.targetTouches[0].pageX-i.left,o=t.targetTouches[0].pageY-i.top;e.mouseDownHandler(n,o),t.preventDefault(),t.stopPropagation()}}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("touchmove",(function(t){try{if(t.target){var i=t.target.getBoundingClientRect(),n=t.targetTouches[0].pageX-i.left,o=t.targetTouches[0].pageY-i.top;e.mouseMoveHandler(n,o),t.preventDefault(),t.stopPropagation()}}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("touchend",(function(t){try{t.target&&(e.mouseUpHandler(0,0),t.preventDefault(),t.stopPropagation())}catch(t){console.log(t)}})),window.addEventListener("contextmenu",(function(t){return t.stopPropagation(),t.preventDefault(),!1})),this.graphics.canvas.addEventListener("wheel",(function(t){try{e.mouseWheelHandler(t.deltaY)}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("mousedown",(function(t){try{e.mouseDownHandler(t.offsetX,t.offsetY,t.button),t.preventDefault(),t.stopPropagation()}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("mousemove",(function(t){try{e.mouseMoveHandler(t.offsetX,t.offsetY),t.preventDefault(),t.stopPropagation()}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("mouseup",(function(t){try{0===t.button&&(e.mouseUpHandler(t.offsetX,t.offsetY,t.button),t.preventDefault(),t.stopPropagation())}catch(t){console.log(t)}})),window.addEventListener("keydown",(function(t){e.keyDownHandler(t.code)})),window.addEventListener("keyup",(function(t){e.keyUpHandler(t.code)})),t.init(this),requestAnimationFrame((function(){e.loop()})),this},t.prototype.loop=function(){var t=this,e=(new Date).getTime(),i=0;0!==this.lastFrame&&(i=e-this.lastFrame),this.lastFrame=e,this.graphics.applyFont(),this.game.update(this,i),this.game.render(this,this.graphics),requestAnimationFrame((function(){t.loop()}))},t.prototype.loadMusic=function(t){var e=new s.SoundImpl(t,!0);return this.resources.push(e),e},t.prototype.loadSound=function(t){var e=new s.SoundImpl(t,!1);return this.resources.push(e),e},t.prototype.loadBitmap=function(t){var e=new n.BitmapImpl(t);return this.resources.push(e),e},t.prototype.loadScaledTileset=function(t,e,i,n){var o=new a.TilesetImpl(t,e,i,n);return this.resources.push(o),o},t.prototype.loadTileset=function(t,e,i){var n=new a.TilesetImpl(t,e,i,1);return this.resources.push(n),n},t.prototype.loadFont=function(t,e){return new o.FontImpl(t,e)},t.prototype.loadLDTK=function(t){var e=new h.LDTKWorld;this.resources.push(e);var i=new XMLHttpRequest;return i.open("GET",t,!0),i.onload=function(t){i.responseText&&e.load(JSON.parse(i.responseText))},i.send(null),e},t.prototype.loadJson=function(t){return new Promise((function(e,i){var n=new XMLHttpRequest;n.open("GET",t,!0),n.onload=function(t){if(n.responseText){var i=n.responseText.replace(/\\"|"(?:\\"|[^"])*"|(\/\/.*|\/\*[\s\S]*?\*\/)/g,(function(t,e){return e?"":t}));e(JSON.parse(i))}},n.onerror=function(t){i(t)},n.send(null)}))},t.prototype.isRunningStandalone=function(){return!0===window.navigator.standalone||window.matchMedia("(display-mode: standalone)").matches},t.prototype.isMobile=function(){return this.isIOS()||this.isAndroid()},t.prototype.isAndroid=function(){return null!=navigator.userAgent.match(/Android/i)},t.prototype.isIOS=function(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].indexOf(navigator.platform)>=0||navigator.userAgent.includes("Mac")&&"ontouchend"in document},t.prototype.isPhone=function(){return this.isIOS()&&window.matchMedia("only screen and (max-width: 760px)").matches},t.prototype.setSoundVolume=function(t){s.SoundImpl.setSoundVolume(t)},t.prototype.getSoundVolume=function(){return s.SoundImpl.getSoundVolume()},t.prototype.setMusicVolume=function(t){s.SoundImpl.setMusicVolume(t)},t.prototype.getMusicVolume=function(){return s.SoundImpl.getMusicVolume()},t}()},705:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Keys=void 0;var i=function(){function t(){}return t.ESCAPE_KEY="Escape",t.ENTER_KEY="Enter",t.LEFT_KEY="ArrowLeft",t.RIGHT_KEY="ArrowRight",t.UP_KEY="ArrowUp",t.DOWN_KEY="ArrowDown",t.SPACE_KEY=" ",t.S_KEY="s",t.M_KEY="m",t.A_KEY="a",t.W_KEY="w",t.D_KEY="d",t.CONTROL_KEY="Control",t.META_KEY="Meta",t.ALT_KEY="Alt",t.TAB_KEY="Tab",t}();e.Keys=i},677:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BitmapImpl=void 0;var i=function(){function t(t){var e=this;this.width=0,this.height=0,this.loaded=!1,this.image=new Image,this.image.onload=function(){e.width=e.image.width,e.height=e.image.height,e.loaded=!0},this.image.src=t}return t.prototype.draw=function(t,e,i){t.drawImage(this.image,e,i)},t.prototype.drawScaled=function(t,e,i,n,o){t.drawImage(this.image,e,i,n,o)},t.prototype.initOnFirstClick=function(){},t}();e.BitmapImpl=i},974:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FontImpl=void 0;var i=function(){function t(t,e){this.name=e;var i=document.createElement("style");i.innerHTML="@font-face { font-family: "+e+"; src: url('"+t+"'); } body { font-family: "+e+"; }",document.head.appendChild(i)}return t.prototype.apply=function(t,e){t.font=e+"px "+this.name},t}();e.FontImpl=i},380:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GraphicsImpl=void 0;var n=i(974),o="undefined"!=typeof InstallTrigger,r=function(){function t(t,e){this.canvas=t,this.ctx=e}return t.prototype.getWidth=function(){return this.canvas.width},t.prototype.getHeight=function(){return this.canvas.height},t.prototype.setDimension=function(t,e){this.canvas.width=t,this.canvas.height=e},t}(),s=function(){function t(t){this.canvas=t,this.width=t.width,this.height=t.height,this.loaded=!0}return t.prototype.draw=function(t,e,i){t.drawImage(this.canvas,e,i)},t.prototype.drawScaled=function(t,e,i,n,o){t.drawImage(this.canvas,e,i,n,o)},t.prototype.getDrawable=function(){return this.canvas},t.prototype.initOnFirstClick=function(){},t}(),a=function(){function t(){this.fontSize=20,this.canvas=document.getElementById("gamecanvas"),this.ctx=this.canvas.getContext("2d"),this.mainCtx=this.ctx,this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.canvas.style.fontSmooth="never",this.canvas.style.webkitFontSmoothing="none",this.canvas.style.imageRendering=o?"crisp-edges":"pixelated",this.font=new n.FontImpl("font.ttf","GuteDefault"),this.font&&this.applyFont()}return t.prototype.clear=function(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)},t.prototype.clip=function(t,e,i,n){var o=new Path2D;o.rect(t,e,i,n),this.ctx.clip(o)},t.prototype.createOffscreen=function(){var t=document.createElement("canvas");t.width=this.getWidth(),t.height=this.getHeight();var e=t.getContext("2d");if(e)return e.webkitImageSmoothingEnabled=!1,e.imageSmoothingEnabled=!1,t.style.fontSmooth="never",t.style.webkitFontSmoothing="none",new r(t,e);throw new Error("Unable to create offscreen canvas")},t.prototype.drawToOffscreen=function(t){this.ctx=t?t.ctx:this.mainCtx},t.prototype.drawOffscreen=function(t){this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.ctx.drawImage(t.canvas,0,0)},t.prototype.drawScaledOffscreen=function(t,e,i,n,o){this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.ctx.drawImage(t.canvas,e,i,n,o)},t.prototype.clearRect=function(t,e,i,n){this.ctx.clearRect(t,e,i,n)},t.prototype.fitScreen=function(t){var e=Math.floor(window.innerWidth/t)*t,i=Math.floor(window.innerHeight/t)*t,n=e/t,o=i/t;this.canvas.style.position="absolute",this.canvas.style.top="0px",this.canvas.style.left="0px",this.canvas.width=n,this.canvas.height=o,this.canvas.style.width=e+"px",this.canvas.style.height=i+"px"},t.prototype.setAlpha=function(t){this.ctx.globalAlpha=t},t.prototype.copy=function(){var t,e=document.createElement("canvas");return e.width=this.getWidth(),e.height=this.getHeight(),null===(t=e.getContext("2d"))||void 0===t||t.drawImage(this.canvas,0,0),new s(e)},t.prototype.getWidth=function(){return this.canvas.width},t.prototype.getHeight=function(){return this.canvas.height},t.prototype.push=function(){this.ctx.save()},t.prototype.pop=function(){this.ctx.restore()},t.prototype.translate=function(t,e){this.ctx.translate(t,e)},t.prototype.scale=function(t,e){this.ctx.scale(t,e)},t.prototype.applyFont=function(){this.font.apply(this.ctx,this.fontSize)},t.prototype.setFont=function(t){this.font=t,this.applyFont()},t.prototype.setFontSize=function(t){this.fontSize=t,this.applyFont()},t.prototype.getStringWidth=function(t){return this.ctx.measureText(t).width},t.prototype.drawString=function(t,e,i,n){this.ctx.fillStyle=n,this.ctx.fillText(i,t,e)},t.prototype.setComposite=function(t){this.ctx.globalCompositeOperation=t},t.prototype.fillRect=function(t,e,i,n,o){this.ctx.fillStyle=o,this.ctx.fillRect(t,e,i,n)},t.prototype.drawLine=function(t,e,i,n,o,r){void 0===r&&(r=1),this.ctx.strokeStyle=o,this.ctx.lineWidth=r,this.ctx.moveTo(t,e),this.ctx.lineTo(i,n),this.ctx.stroke()},t.prototype.drawBitmap=function(t,e,i){this.ctx.imageSmoothingEnabled=!1,this.ctx.webkitImageSmoothingEnabled=!1,i.draw(this.ctx,t,e)},t.prototype.drawScaledBitmap=function(t,e,i,n,o){this.ctx.imageSmoothingEnabled=!1,this.ctx.webkitImageSmoothingEnabled=!1,o.drawScaled(this.ctx,t,e,i,n)},t}();e.GraphicsImpl=a},233:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SoundImpl=void 0;var n,o,r=i(634);"undefined"!=typeof window&&(n=window.AudioContext||window.webkitAudioContext),"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){if(r.isMusicOn()&&s.CURRENT_MUSIC&&(document.hidden?s.CURRENT_MUSIC.stop():s.CURRENT_MUSIC.play(s.CURRENT_MUSIC.volume)),r.isSoundOn())for(var t=0,e=s.CURRENT_LOOPS;t<e.length;t++){var i=e[t];document.hidden?i.stop(!1):i.play(i.volume)}}));var s=function(){function t(t,e){var i=this;this.loaded=!1,this.volume=1,this.music=!1,this.looped=!1,this.url=t,this.music=e;var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=function(t){var e=n.response;e&&(i.data=e,i.loaded=!0,i.tryLoad())},n.send(null)}return t.setSoundVolume=function(e){this.soundVolume=e;for(var i=0,n=this.CURRENT_LOOPS;i<n.length;i++){var r=n[i];r.gain.gain.linearRampToValueAtTime(r.volume*t.soundVolume,o.currentTime+.25)}},t.getSoundVolume=function(){return this.soundVolume},t.setMusicVolume=function(e){this.musicVolume=e,t.CURRENT_MUSIC&&t.CURRENT_MUSIC.gain&&t.CURRENT_MUSIC.gain.gain.linearRampToValueAtTime(t.CURRENT_MUSIC.volume*t.musicVolume,o.currentTime+.25)},t.getMusicVolume=function(){return this.musicVolume},t.prototype.tryLoad=function(){var e=this;o&&this.data&&o.decodeAudioData(this.data,(function(i){e.buffer=i,t.CURRENT_MUSIC===e&&(t.CURRENT_MUSIC=null,e.play(e.volume))}),(function(t){console.log("Failed to load: "+e.url)}))},t.prototype.initOnFirstClick=function(){o||(o=new n).resume(),this.tryLoad()},t.prototype.play=function(e,i){void 0===i&&(i=!1),this.volume=e,this.buffer?this.music&&(t.CURRENT_MUSIC!==this&&(t.CURRENT_MUSIC&&t.CURRENT_MUSIC.stop(),t.CURRENT_MUSIC=this),this.source)||this.music&&!r.isMusicOn()||r.isSoundOn()&&(this.source=o.createBufferSource(),this.source.buffer=this.buffer,this.gain=o.createGain(),this.source.connect(this.gain),this.gain.connect(o.destination),this.looped=!1,(this.music||i)&&(this.gain.gain.value=0,this.source.loop=!0,this.looped=!0),this.source.start(0),this.music||i?this.gain.gain.linearRampToValueAtTime(e*(i?t.soundVolume:t.musicVolume),o.currentTime+2):this.gain.gain.value=e*t.soundVolume,i&&t.CURRENT_LOOPS.push(this)):this.music&&(t.CURRENT_MUSIC&&t.CURRENT_MUSIC.stop(),t.CURRENT_MUSIC=this)},t.prototype.stop=function(e){var i=this;if(void 0===e&&(e=!0),this.source){if(this.looped){this.gain.gain.linearRampToValueAtTime(0,o.currentTime+3);var n=this.source;setTimeout((function(){n.stop()}),4e3)}else this.source.stop();this.source=null}if(e){var r=t.CURRENT_LOOPS.findIndex((function(t){return t===i}));r>=0&&t.CURRENT_LOOPS.splice(r,1)}},t.CURRENT_LOOPS=[],t.soundVolume=1,t.musicVolume=1,t}();e.SoundImpl=s},52:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TilesetImpl=void 0;var i=function(){function t(t,e,i,n,o,r){this.image=t,this.width=n,this.height=o,this.x=e,this.y=i,this.scale=r,this.loaded=!0}return t.prototype.draw=function(t,e,i){t.drawImage(this.image,this.x,this.y,this.width,this.height,e,i,this.width*this.scale,this.height*this.scale)},t.prototype.drawScaled=function(t,e,i,n,o){t.drawImage(this.image,this.x,this.y,this.width,this.height,e,i,n,o)},t.prototype.initOnFirstClick=function(){},t}(),n=function(){function t(t,e,n,o){var r=this;void 0===o&&(o=1),this.loaded=!1,this.bitmaps=[],this.scanline=0,this.tileCount=0,this.tints={},this.onLoaded=function(){},this.tileWidth=this.originalTileWidth=e,this.tileHeight=this.originalTileHeight=n,this.scale=o,this.image=new Image,this.image.onload=function(){r.scanline=Math.floor(r.image.width/r.tileWidth);var t=Math.floor(r.image.height/r.tileHeight);r.tileCount=t*r.scanline;for(var e=0;e<t;e++)for(var n=0;n<r.scanline;n++)r.bitmaps.push(new i(r.image,n*r.tileWidth,e*r.tileHeight,r.tileWidth,r.tileHeight,o));r.tileWidth*=o,r.tileHeight*=o,r.onLoaded(),r.loaded=!0},this.image.src=t}return t.prototype.getTilesAcross=function(){return this.scanline},t.prototype.getTileWidth=function(){return this.tileWidth},t.prototype.getTileHeight=function(){return this.tileHeight},t.prototype.getTileCount=function(){return this.tileCount},t.prototype.initOnFirstClick=function(){},t.prototype.getTile=function(t){return this.bitmaps[t]},t.prototype.getTintedTile=function(t,e,n){var o=t%this.scanline,r=Math.floor(t/this.scanline),s=this.tints[e];if(!s){var a=document.createElement("canvas");a.width=this.image.width,a.height=this.image.height;var h=a.getContext("2d");if(h){h.drawImage(this.image,0,0);for(var u=h.getImageData(0,0,a.width,a.height),l=0;l<u.data.length;l+=4){var c=(u.data[l]+u.data[l+1]+u.data[l+2])/3;u.data[l]=Math.floor(c*n[0]),u.data[l+1]=Math.floor(c*n[1]),u.data[l+2]=Math.floor(c*n[2])}h.putImageData(u,0,0)}(s=new Image).src=a.toDataURL(),this.tints[e]=s}return new i(s,o*this.originalTileWidth,r*this.originalTileHeight,this.originalTileWidth,this.originalTileHeight,this.scale)},t}();e.TilesetImpl=n},883:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AStarPathFinder=void 0;var n=i(30),o=i(482),r=function(){function t(t){this.objectPool=[],this.openList=[],this.pathFindCounter=1,this.width=t.getMapWidth(),this.height=t.getMapHeight(),this.map=t,this.open=new Array,this.closed=new Array;for(var e=0;e<this.width*this.height;e++){for(var i=new Array,n=new Array,o=0;o<5;o++)i.push(0),n.push(0);this.open.push(i),this.closed.push(n)}}return t.prototype.clear=function(){for(var t=0;t<this.openList.length;t++)this.objectPool.push(this.openList[t]);this.openList=new Array,this.pathFindCounter++},t.prototype.generatePath=function(t){for(var e=t,i=new o.Path;null!=e;)i.add(e.x,e.y),e=e.parent;return i},t.prototype.blocked=function(t,e,i,n){var o=this.ignoreFinalOccupation&&this.atTarget(i,n);return!this.map.locationDiscovered(i,n)||!!this.map.blocked(this.mover,null,t,e,i,n,o,this.atTarget(i,n))},t.prototype.atTarget=function(t,e){for(var i=0;i<this.mover.getTilesWidth();i++)for(var n=0;n<this.mover.getTilesHeight();n++)if(t+i==this.tx&&e+n==this.ty)return!0;return!1},t.prototype.findPath=function(t,e,i,n,o,r){if(e=Math.floor(e),i=Math.floor(i),this.max=n,this.ignoreFinalOccupation=o,this.mover=t,this.tx=e,this.ty=i,this.blocked(e,i,e,i))return null;for(this.clear(),this.addLocation(null,Math.floor(t.getTileMapX()),Math.floor(t.getTileMapY()));this.openList.length>0;){var s=this.openList[0];if(this.openList.splice(0,1),this.atTarget(s.x,s.y))return this.generatePath(s);this.addLocation(s,s.x+1,s.y),this.addLocation(s,s.x-1,s.y),this.addLocation(s,s.x,s.y+1),this.addLocation(s,s.x,s.y-1)}return null},t.prototype.addLocation=function(e,i,n){var o=i=Math.floor(i),r=n=Math.floor(n),s=t.NONE;if(null!=e&&(o=e.x,(r=e.y)+1==n&&(s=t.NORTH_TO_SOUTH),r-1==n&&(s=t.SOUTH_TO_NORTH),o+1==i&&(s=t.WEST_TO_EAST),o-1==i&&(s=t.EAST_TO_WEST)),this.map.validLocation(i,n)&&this.open[i+n*this.width][s]!=this.pathFindCounter&&this.closed[i+n*this.width][s]!=this.pathFindCounter)if(null!=e&&e.depth>this.max)this.closed[i+n*this.width][s]=this.pathFindCounter;else if(this.map.locationDiscovered(i,n))if(this.blocked(o,r,i,n))this.closed[i+n*this.width][s]=this.pathFindCounter;else{this.open[i+n*this.width][s]=this.pathFindCounter;for(var a=this.createMapNode(i,n,e,this.getHeuristic(i,n)),h=0;h<this.openList.length;h++)if(this.openList[h].h>a.h)return void this.openList.splice(h,0,a);this.openList.push(a)}else this.closed[i+n*this.width][s]=this.pathFindCounter},t.prototype.getHeuristic=function(t,e){var i=Math.abs(this.tx-t),n=Math.abs(this.ty-e);return i*i+n*n},t.prototype.createMapNode=function(t,e,i,o){if(0==this.objectPool.length){var r=new n.MapNode;this.objectPool.push(r)}var s=this.objectPool[0];return this.objectPool.splice(0,1),s.x=t,s.y=e,s.parent=i,s.h=o,s.depth=null!=i?i.depth+1:0,s},t.NORTH_TO_SOUTH=0,t.EAST_TO_WEST=1,t.SOUTH_TO_NORTH=2,t.WEST_TO_EAST=3,t.NONE=4,t}();e.AStarPathFinder=r},30:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MapNode=void 0;e.MapNode=function(){}},482:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Path=void 0;var n=i(844),o=function(){function t(){this.steps=new Array}return t.prototype.add=function(t,e){this.steps.splice(0,0,new n.Step(t,e))},t.prototype.getLastStep=function(){return this.steps[this.steps.length-1]},t.prototype.pop=function(){var t=this.steps[0];return this.steps.splice(0,1),t},t}();e.Path=o},844:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Step=void 0;e.Step=function(t,e){this.x=t,this.y=e}},181:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0}),e.LDTKWorld=void 0;var r=i(963),s=i(850),a=i(7),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.initOnFirstClick=function(){},e.prototype.load=function(t){this.gridSize=t.defaultGridSize;var e=t.defs.tilesets[0];this.tilesetScanline=e.pxWid/e.tileGridSize,this.tilesetSize=e.tileGridSize;for(var i=0,n=t.levels;i<n.length;i++){var o=n[i],h=new a.MapLevel(this,o.identifier);h.worldX=o.worldX,h.worldY=o.worldY;for(var u=0,l=o.fieldInstances;u<l.length;u++){var c=l[u];h.fields[c.__identifier]=c.__value}for(var p=0,d=o.layerInstances;p<d.length;p++){var f=d[p];if("Entities"===f.__type)for(var g=0,y=f.entityInstances;g<y.length;g++){for(var m=y[g],v=new r.MapEntity(h,m.px[0]/f.__gridSize,m.px[1]/f.__gridSize,m.width/f.__gridSize,m.height/f.__gridSize,m.__identifier),w=0,S=m.fieldInstances;w<S.length;w++)c=S[w],v.fields[c.__identifier]=c.__value;h.entities.push(v)}else{for(var _=new s.MapLayer(h,f.__identifier,f.__cWid,f.__cHei),M=h.world.tilesetScanline,T=h.world.tilesetSize,O=0,E=f.gridTiles;O<E.length;O++){var b=E[O],x=Math.floor(b.px[0]/f.__gridSize)+Math.floor(b.px[1]/f.__gridSize)*_.width,R=Math.floor(b.src[0]/T),C=Math.floor(b.src[1]/T)*M+R;_.tiles[x]=C+1}h.layers.splice(0,0,_),h.layerByName[_.name]=_}}h.layers.length>0?(h.width=h.layers[0].width,h.height=h.layers[0].height):(h.width=o.pxWid/this.gridSize,h.height=o.pxHei/this.gridSize),this.levels[h.id]=h}return this.loaded=!0,this},e}(i(449).MapWorld);e.LDTKWorld=h},963:function(t,e){var i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.MapEntity=void 0;var n=function(){function t(t,e,i,n,o,r){this.fields={},this.level=t,this.x=e,this.y=i,this.width=n,this.height=o,this.type=r}return t.prototype.copy=function(e){var n=new t(e,this.x,this.y,this.width,this.height,this.type);return n.fields=i({},this.fields),n},t}();e.MapEntity=n},850:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MapLayer=void 0;var i=function(){function t(t,e,i,n){this.name=e,this.level=t,this.width=i,this.height=n,this.tiles=[];for(var o=0;o<this.width*this.height;o++)this.tiles.push(0)}return t.prototype.set=function(t,e,i){if(!(t<0||e<0||t>=this.width||e>=this.height)){var n=t+e*this.width;this.tiles[n]=i}},t.prototype.get=function(t,e){if(t<0||e<0||t>=this.width||e>=this.height)return 0;var i=t+e*this.width;return this.tiles[i]},t.prototype.copy=function(e){for(var i=new t(e,this.name,this.width,this.height),n=0;n<this.width*this.height;n++)i.tiles[n]=this.tiles[n];return i},t}();e.MapLayer=i},7:function(t,e,i){var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.MapLevel=void 0;var o=i(449),r=function(){function t(t,e){this.layers=[],this.layerByName={},this.entities=[],this.fields={},this.worldX=0,this.worldY=0,this.world=t,this.id=e}return t.prototype.getFirstEntityOfType=function(t){for(var e=0,i=this.entities;e<i.length;e++){var n=i[e];if(n.type===t)return n}return null},t.prototype.copy=function(e){var i=new o.MapWorld;i.gridSize=this.world.gridSize,i.loaded=this.world.loaded,i.tilesetScanline=this.world.tilesetScanline,i.tilesetSize=this.world.tilesetSize;var r=new t(i,e);r.width=this.width,r.height=this.height,r.worldX=this.worldX,r.worldY=this.worldY,r.fields=n({},this.fields);for(var s=0,a=this.layers;s<a.length;s++){var h=a[s].copy(r);r.layers.push(h),r.layerByName[h.name]=h}for(var u=0,l=this.entities;u<l.length;u++){var c=l[u];h=c.copy(r),r.entities.push(c)}return r},t}();e.MapLevel=r},449:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MapWorld=void 0;e.MapWorld=function(){this.levels={},this.gridSize=0,this.tilesetScanline=0,this.tilesetSize=0,this.loaded=!1}}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}var n={};return(()=>{var t=n;Object.defineProperty(t,"__esModule",{value:!0}),t.MapEntity=t.MapLayer=t.MapLevel=t.MapWorld=t.LDTKWorld=t.Step=t.Path=t.AStarPathFinder=t.Keys=t.BLUE=t.RED=t.GREEN=t.BLACK=t.WHITE=t.setSoundOn=t.setMusicOn=t.isSoundOn=t.isMusicOn=t.startGame=void 0;var e=i(634);Object.defineProperty(t,"startGame",{enumerable:!0,get:function(){return e.startGame}}),Object.defineProperty(t,"isMusicOn",{enumerable:!0,get:function(){return e.isMusicOn}}),Object.defineProperty(t,"isSoundOn",{enumerable:!0,get:function(){return e.isSoundOn}}),Object.defineProperty(t,"setMusicOn",{enumerable:!0,get:function(){return e.setMusicOn}}),Object.defineProperty(t,"setSoundOn",{enumerable:!0,get:function(){return e.setSoundOn}});var o=i(876);Object.defineProperty(t,"WHITE",{enumerable:!0,get:function(){return o.WHITE}}),Object.defineProperty(t,"BLACK",{enumerable:!0,get:function(){return o.BLACK}}),Object.defineProperty(t,"GREEN",{enumerable:!0,get:function(){return o.GREEN}}),Object.defineProperty(t,"RED",{enumerable:!0,get:function(){return o.RED}}),Object.defineProperty(t,"BLUE",{enumerable:!0,get:function(){return o.BLUE}});var r=i(705);Object.defineProperty(t,"Keys",{enumerable:!0,get:function(){return r.Keys}});var s=i(883);Object.defineProperty(t,"AStarPathFinder",{enumerable:!0,get:function(){return s.AStarPathFinder}});var a=i(482);Object.defineProperty(t,"Path",{enumerable:!0,get:function(){return a.Path}});var h=i(844);Object.defineProperty(t,"Step",{enumerable:!0,get:function(){return h.Step}});var u=i(181);Object.defineProperty(t,"LDTKWorld",{enumerable:!0,get:function(){return u.LDTKWorld}});var l=i(449);Object.defineProperty(t,"MapWorld",{enumerable:!0,get:function(){return l.MapWorld}});var c=i(7);Object.defineProperty(t,"MapLevel",{enumerable:!0,get:function(){return c.MapLevel}});var p=i(850);Object.defineProperty(t,"MapLayer",{enumerable:!0,get:function(){return p.MapLayer}});var d=i(963);Object.defineProperty(t,"MapEntity",{enumerable:!0,get:function(){return d.MapEntity}})})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,