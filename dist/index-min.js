!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.gute=e():t.gute=e()}(self,(function(){return(()=>{"use strict";var t={876:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BLUE=e.GREEN=e.RED=e.BLACK=e.WHITE=void 0,e.WHITE="white",e.BLACK="black",e.RED="red",e.GREEN="green",e.BLUE="blue"},634:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.startGame=e.setMusicOn=e.setSoundOn=e.isMusicOn=e.isSoundOn=void 0;var n=i(677),o=i(974),r=i(380),s=i(233),a=i(52),h=i(181),u=!0,l=!0;e.isSoundOn=function(){return u},e.isMusicOn=function(){return l},e.setSoundOn=function(t){u=t},e.setMusicOn=function(t){!t&&l&&(l=!1,s.SoundImpl.CURRENT_MUSIC&&s.SoundImpl.CURRENT_MUSIC.stop()),t&&!l&&(l=!0,s.SoundImpl.CURRENT_MUSIC&&s.SoundImpl.CURRENT_MUSIC.play(s.SoundImpl.CURRENT_MUSIC.volume))},e.startGame=function(t){(new c).start(t)};var c=function(){function t(){this.resources=[],this.lastFrame=0,this.inited=!1}return t.prototype.getGraphics=function(){return this.graphics},t.prototype.resourcesRemaining=function(){return this.resources.filter((function(t){return!t.loaded})).length},t.prototype.resourcesTotal=function(){return this.resources.length},t.prototype.allResourcesLoaded=function(){for(var t=0,e=this.resources;t<e.length;t++)if(!e[t].loaded)return!1;return!0},t.prototype.initResourcesOnFirstClick=function(){if(this.allResourcesLoaded()&&!this.inited){this.inited=!0;for(var t=0,e=this.resources;t<e.length;t++)e[t].initOnFirstClick()}},t.prototype.mouseMoveHandler=function(t,e,i){void 0===i&&(i=0),this.initResourcesOnFirstClick();var n=this.graphics.canvas;n.focus();var o=n.clientWidth,r=n.clientHeight;t=Math.floor(t/o*n.width),e=Math.floor(e/r*n.height),this.game.onMouseMove(this,t,e)},t.prototype.mouseWheelHandler=function(t){this.game.onMouseWheel(this,t)},t.prototype.mouseDownHandler=function(t,e,i){void 0===i&&(i=0),this.initResourcesOnFirstClick();var n=this.graphics.canvas;n.focus();var o=n.clientWidth,r=n.clientHeight;t=Math.floor(t/o*n.width),e=Math.floor(e/r*n.height),this.game.onMouseDown(this,t,e,i)},t.prototype.mouseUpHandler=function(t,e,i){void 0===i&&(i=0),this.initResourcesOnFirstClick();var n=this.graphics.canvas,o=n.clientWidth,r=n.clientHeight;t=Math.floor(t/o*n.width),e=Math.floor(e/r*n.height),this.game.onMouseUp(this,t,e,i)},t.prototype.keyDownHandler=function(t){this.initResourcesOnFirstClick(),this.game.onKeyDown(this,t)},t.prototype.keyUpHandler=function(t){this.game.onKeyUp(this,t)},t.prototype.start=function(t){var e=this;return this.game=t,this.graphics=new r.GraphicsImpl,this.graphics.canvas.addEventListener("touchstart",(function(t){try{if(t.target){var i=t.target.getBoundingClientRect(),n=t.targetTouches[0].pageX-i.left,o=t.targetTouches[0].pageY-i.top;e.mouseDownHandler(n,o),t.preventDefault(),t.stopPropagation()}}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("touchmove",(function(t){try{if(t.target){var i=t.target.getBoundingClientRect(),n=t.targetTouches[0].pageX-i.left,o=t.targetTouches[0].pageY-i.top;e.mouseMoveHandler(n,o),t.preventDefault(),t.stopPropagation()}}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("touchend",(function(t){try{t.target&&(e.mouseUpHandler(0,0),t.preventDefault(),t.stopPropagation())}catch(t){console.log(t)}})),window.addEventListener("contextmenu",(function(t){return t.stopPropagation(),t.preventDefault(),!1})),this.graphics.canvas.addEventListener("wheel",(function(t){try{e.mouseWheelHandler(t.deltaY)}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("mousedown",(function(t){try{e.mouseDownHandler(t.offsetX,t.offsetY,t.button),t.preventDefault(),t.stopPropagation()}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("mousemove",(function(t){try{e.mouseMoveHandler(t.offsetX,t.offsetY),t.preventDefault(),t.stopPropagation()}catch(t){console.log(t)}})),this.graphics.canvas.addEventListener("mouseup",(function(t){try{0===t.button&&(e.mouseUpHandler(t.offsetX,t.offsetY,t.button),t.preventDefault(),t.stopPropagation())}catch(t){console.log(t)}})),window.addEventListener("keydown",(function(t){e.keyDownHandler(t.code)})),window.addEventListener("keyup",(function(t){e.keyUpHandler(t.code)})),t.init(this),requestAnimationFrame((function(){e.loop()})),this},t.prototype.loop=function(){var t=this,e=(new Date).getTime(),i=0;0!==this.lastFrame&&(i=e-this.lastFrame),this.lastFrame=e,this.graphics.applyFont(),this.game.update(this,i),this.game.render(this,this.graphics),requestAnimationFrame((function(){t.loop()}))},t.prototype.loadMusic=function(t){var e=new s.SoundImpl(t,!0);return this.resources.push(e),e},t.prototype.loadSound=function(t){var e=new s.SoundImpl(t,!1);return this.resources.push(e),e},t.prototype.loadBitmap=function(t){var e=new n.BitmapImpl(t);return this.resources.push(e),e},t.prototype.loadScaledTileset=function(t,e,i,n){var o=new a.TilesetImpl(t,e,i,n);return this.resources.push(o),o},t.prototype.loadTileset=function(t,e,i){var n=new a.TilesetImpl(t,e,i,1);return this.resources.push(n),n},t.prototype.loadFont=function(t,e){return new o.FontImpl(t,e)},t.prototype.loadLDTK=function(t,e){var i=this,n=new h.LDTKWorld;return this.resources.push(n),n.load(t,(function(t){return i.loadJson(e(t))}))},t.prototype.loadJson=function(t){return new Promise((function(e,i){var n=new XMLHttpRequest;n.open("GET",t,!0),n.onload=function(t){if(n.responseText){var i=n.responseText.replace(/\\"|"(?:\\"|[^"])*"|(\/\/.*|\/\*[\s\S]*?\*\/)/g,(function(t,e){return e?"":t}));e(JSON.parse(i))}},n.onerror=function(t){i(t)},n.send()}))},t.prototype.isRunningStandalone=function(){return!0===window.navigator.standalone||window.matchMedia("(display-mode: standalone)").matches},t.prototype.isTablet=function(){return!(this.isPhone()||!this.isIOS())||/(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(navigator.userAgent.toLowerCase())},t.prototype.isMobile=function(){return this.isIOS()||this.isAndroid()},t.prototype.isAndroid=function(){return null!=navigator.userAgent.match(/Android/i)},t.prototype.isIOS=function(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].indexOf(navigator.platform)>=0||navigator.userAgent.includes("Mac")&&"ontouchend"in document},t.prototype.isPhone=function(){return this.isIOS()&&window.matchMedia("only screen and (max-width: 760px)").matches},t.prototype.setSoundVolume=function(t){s.SoundImpl.setSoundVolume(t)},t.prototype.getSoundVolume=function(){return s.SoundImpl.getSoundVolume()},t.prototype.setMusicVolume=function(t){s.SoundImpl.setMusicVolume(t)},t.prototype.getMusicVolume=function(){return s.SoundImpl.getMusicVolume()},t}()},705:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Keys=void 0;var i=function(){function t(){}return t.ESCAPE_KEY="Escape",t.ENTER_KEY="Enter",t.LEFT_KEY="ArrowLeft",t.RIGHT_KEY="ArrowRight",t.UP_KEY="ArrowUp",t.DOWN_KEY="ArrowDown",t.SPACE_KEY=" ",t.S_KEY="s",t.M_KEY="m",t.A_KEY="a",t.W_KEY="w",t.D_KEY="d",t.CONTROL_KEY="Control",t.META_KEY="Meta",t.ALT_KEY="Alt",t.TAB_KEY="Tab",t}();e.Keys=i},677:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BitmapImpl=void 0;var i=function(){function t(t){var e=this;this.width=0,this.height=0,this.loaded=!1,this.image=new Image,this.image.onload=function(){e.width=e.image.width,e.height=e.image.height,e.loaded=!0},this.image.src=t}return t.prototype.draw=function(t,e,i){t.drawImage(this.image,e,i)},t.prototype.drawScaled=function(t,e,i,n,o){t.drawImage(this.image,e,i,n,o)},t.prototype.initOnFirstClick=function(){},t}();e.BitmapImpl=i},974:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FontImpl=void 0;var i=function(){function t(t,e){this.name=e;var i=document.createElement("style");i.innerHTML="@font-face { font-family: "+e+"; src: url('"+t+"'); } body { font-family: "+e+"; }",document.head.appendChild(i)}return t.prototype.apply=function(t,e){t.font=e+"px "+this.name},t}();e.FontImpl=i},380:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GraphicsImpl=void 0;var n=i(974),o="undefined"!=typeof InstallTrigger,r=function(){function t(t,e){this.canvas=t,this.ctx=e}return t.prototype.getWidth=function(){return this.canvas.width},t.prototype.getHeight=function(){return this.canvas.height},t.prototype.setDimension=function(t,e){this.canvas.width=t,this.canvas.height=e},t}(),s=function(){function t(t){this.canvas=t,this.width=t.width,this.height=t.height,this.loaded=!0}return t.prototype.draw=function(t,e,i){t.drawImage(this.canvas,e,i)},t.prototype.drawScaled=function(t,e,i,n,o){t.drawImage(this.canvas,e,i,n,o)},t.prototype.getDrawable=function(){return this.canvas},t.prototype.initOnFirstClick=function(){},t}(),a=function(){function t(){this.fontSize=20,this.canvas=document.getElementById("gamecanvas"),this.ctx=this.canvas.getContext("2d"),this.mainCtx=this.ctx,this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.canvas.style.fontSmooth="never",this.canvas.style.webkitFontSmoothing="none",this.canvas.style.imageRendering=o?"crisp-edges":"pixelated",this.font=new n.FontImpl("font.ttf","GuteDefault"),this.font&&this.applyFont()}return t.prototype.clear=function(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)},t.prototype.clip=function(t,e,i,n){var o=new Path2D;o.rect(t,e,i,n),this.ctx.clip(o)},t.prototype.createOffscreen=function(){var t=document.createElement("canvas");t.width=this.getWidth(),t.height=this.getHeight();var e=t.getContext("2d");if(e)return e.webkitImageSmoothingEnabled=!1,e.imageSmoothingEnabled=!1,t.style.fontSmooth="never",t.style.webkitFontSmoothing="none",new r(t,e);throw new Error("Unable to create offscreen canvas")},t.prototype.drawToOffscreen=function(t){this.ctx=t?t.ctx:this.mainCtx},t.prototype.drawOffscreen=function(t){this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.ctx.drawImage(t.canvas,0,0)},t.prototype.drawScaledOffscreen=function(t,e,i,n,o){this.ctx.webkitImageSmoothingEnabled=!1,this.ctx.imageSmoothingEnabled=!1,this.ctx.drawImage(t.canvas,e,i,n,o)},t.prototype.clearRect=function(t,e,i,n){this.ctx.clearRect(t,e,i,n)},t.prototype.fitScreen=function(t){var e=Math.floor(window.innerWidth/t)*t,i=Math.floor(window.innerHeight/t)*t,n=e/t,o=i/t;this.canvas.style.position="absolute",this.canvas.style.top="0px",this.canvas.style.left="0px",this.canvas.width=n,this.canvas.height=o,this.canvas.style.width=e+"px",this.canvas.style.height=i+"px"},t.prototype.setAlpha=function(t){this.ctx.globalAlpha=t},t.prototype.copy=function(){var t,e=document.createElement("canvas");return e.width=this.getWidth(),e.height=this.getHeight(),null===(t=e.getContext("2d"))||void 0===t||t.drawImage(this.canvas,0,0),new s(e)},t.prototype.getWidth=function(){return this.canvas.width},t.prototype.getHeight=function(){return this.canvas.height},t.prototype.push=function(){this.ctx.save()},t.prototype.pop=function(){this.ctx.restore()},t.prototype.translate=function(t,e){this.ctx.translate(t,e)},t.prototype.scale=function(t,e){this.ctx.scale(t,e)},t.prototype.applyFont=function(){this.font.apply(this.ctx,this.fontSize)},t.prototype.setFont=function(t){this.font=t,this.applyFont()},t.prototype.setFontSize=function(t){this.fontSize=t,this.applyFont()},t.prototype.getStringWidth=function(t){return this.ctx.measureText(t).width},t.prototype.drawString=function(t,e,i,n){this.ctx.fillStyle=n,this.ctx.fillText(i,t,e)},t.prototype.setComposite=function(t){this.ctx.globalCompositeOperation=t},t.prototype.fillRect=function(t,e,i,n,o){this.ctx.fillStyle=o,this.ctx.fillRect(t,e,i,n)},t.prototype.drawLine=function(t,e,i,n,o,r){void 0===r&&(r=1),this.ctx.strokeStyle=o,this.ctx.lineWidth=r,this.ctx.moveTo(t,e),this.ctx.lineTo(i,n),this.ctx.stroke()},t.prototype.drawBitmap=function(t,e,i){i&&(this.ctx.imageSmoothingEnabled=!1,this.ctx.webkitImageSmoothingEnabled=!1,i.draw(this.ctx,t,e))},t.prototype.drawScaledBitmap=function(t,e,i,n,o){o&&(this.ctx.imageSmoothingEnabled=!1,this.ctx.webkitImageSmoothingEnabled=!1,o.drawScaled(this.ctx,t,e,i,n))},t}();e.GraphicsImpl=a},233:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SoundImpl=void 0;var n,o,r=i(634);"undefined"!=typeof window&&(n=window.AudioContext||window.webkitAudioContext),"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){if(r.isMusicOn()&&s.CURRENT_MUSIC&&(document.hidden?s.CURRENT_MUSIC.stop():s.CURRENT_MUSIC.play(s.CURRENT_MUSIC.volume)),r.isSoundOn())for(var t=0,e=s.CURRENT_LOOPS;t<e.length;t++){var i=e[t];document.hidden?i.stop(!1):i.play(i.volume)}}));var s=function(){function t(t,e){var i=this;this.loaded=!1,this.volume=1,this.music=!1,this.looped=!1,this.url=t,this.music=e;var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=function(t){var e=n.response;e&&(i.data=e,i.loaded=!0,i.tryLoad())},n.send()}return t.setSoundVolume=function(e){this.soundVolume=e;for(var i=0,n=this.CURRENT_LOOPS;i<n.length;i++){var r=n[i];r.gain.gain.linearRampToValueAtTime(r.volume*t.soundVolume,o.currentTime+.25)}},t.getSoundVolume=function(){return this.soundVolume},t.setMusicVolume=function(e){this.musicVolume=e,t.CURRENT_MUSIC&&t.CURRENT_MUSIC.gain&&t.CURRENT_MUSIC.gain.gain.linearRampToValueAtTime(t.CURRENT_MUSIC.volume*t.musicVolume,o.currentTime+.25)},t.getMusicVolume=function(){return this.musicVolume},t.prototype.tryLoad=function(){var e=this;if(o&&this.data)try{o.decodeAudioData(this.data,(function(i){e.buffer=i,t.CURRENT_MUSIC===e&&(t.CURRENT_MUSIC=null,e.play(e.volume))}),(function(t){console.log("Failed to load: "+e.url)}))}catch(t){console.log("decodeAudioData exception on loading "+this.url)}},t.prototype.initOnFirstClick=function(){if(!o)try{(o=new n).resume()}catch(t){console.log("decodeAudioData exception on creating audio context")}this.tryLoad()},t.prototype.play=function(e,i){void 0===i&&(i=!1),this.volume=e,this.buffer?this.music&&(t.CURRENT_MUSIC!==this&&(t.CURRENT_MUSIC&&t.CURRENT_MUSIC.stop(),t.CURRENT_MUSIC=this),this.source)||this.music&&!r.isMusicOn()||r.isSoundOn()&&(this.source=o.createBufferSource(),this.source.buffer=this.buffer,this.gain=o.createGain(),this.source.connect(this.gain),this.gain.connect(o.destination),this.looped=!1,(this.music||i)&&(this.gain.gain.value=0,this.source.loop=!0,this.looped=!0),this.source.start(0),this.music||i?this.gain.gain.linearRampToValueAtTime(e*(i?t.soundVolume:t.musicVolume),o.currentTime+2):this.gain.gain.value=e*t.soundVolume,i&&t.CURRENT_LOOPS.push(this)):this.music&&(t.CURRENT_MUSIC&&t.CURRENT_MUSIC.stop(),t.CURRENT_MUSIC=this)},t.prototype.stop=function(e){var i=this;if(void 0===e&&(e=!0),this.source){if(this.looped){this.gain.gain.linearRampToValueAtTime(0,o.currentTime+3);var n=this.source;setTimeout((function(){n.stop()}),4e3)}else this.source.stop();this.source=null}if(e){var r=t.CURRENT_LOOPS.findIndex((function(t){return t===i}));r>=0&&t.CURRENT_LOOPS.splice(r,1)}},t.CURRENT_LOOPS=[],t.soundVolume=1,t.musicVolume=1,t}();e.SoundImpl=s},52:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TilesetImpl=void 0;var i=function(){function t(t,e,i,n,o,r){this.image=t,this.width=n,this.height=o,this.x=e,this.y=i,this.scale=r,this.loaded=!0}return t.prototype.draw=function(t,e,i){t.drawImage(this.image,this.x,this.y,this.width,this.height,e,i,this.width*this.scale,this.height*this.scale)},t.prototype.drawScaled=function(t,e,i,n,o){t.drawImage(this.image,this.x,this.y,this.width,this.height,e,i,n,o)},t.prototype.initOnFirstClick=function(){},t}(),n=function(){function t(t,e,n,o){var r=this;void 0===o&&(o=1),this.loaded=!1,this.bitmaps=[],this.scanline=0,this.tileCount=0,this.tints={},this.onLoaded=function(){},this.tileWidth=this.originalTileWidth=e,this.tileHeight=this.originalTileHeight=n,this.scale=o,this.image=new Image,this.image.onload=function(){r.scanline=Math.floor(r.image.width/r.tileWidth);var t=Math.floor(r.image.height/r.tileHeight);r.tileCount=t*r.scanline;for(var e=0;e<t;e++)for(var n=0;n<r.scanline;n++)r.bitmaps.push(new i(r.image,n*r.tileWidth,e*r.tileHeight,r.tileWidth,r.tileHeight,o));r.tileWidth*=o,r.tileHeight*=o,r.onLoaded(),r.loaded=!0},this.image.src=t}return t.prototype.getTilesAcross=function(){return this.scanline},t.prototype.getTileWidth=function(){return this.tileWidth},t.prototype.getTileHeight=function(){return this.tileHeight},t.prototype.getTileCount=function(){return this.tileCount},t.prototype.initOnFirstClick=function(){},t.prototype.getTile=function(t){return this.bitmaps[t]},t.prototype.getTintedTile=function(t,e,n){var o=t%this.scanline,r=Math.floor(t/this.scanline),s=this.tints[e];if(!s){var a=document.createElement("canvas");a.width=this.image.width,a.height=this.image.height;var h=a.getContext("2d");if(h){h.drawImage(this.image,0,0);for(var u=h.getImageData(0,0,a.width,a.height),l=0;l<u.data.length;l+=4){var c=(u.data[l]+u.data[l+1]+u.data[l+2])/3;u.data[l]=Math.floor(c*n[0]),u.data[l+1]=Math.floor(c*n[1]),u.data[l+2]=Math.floor(c*n[2])}h.putImageData(u,0,0)}(s=new Image).src=a.toDataURL(),this.tints[e]=s}return new i(s,o*this.originalTileWidth,r*this.originalTileHeight,this.originalTileWidth,this.originalTileHeight,this.scale)},t}();e.TilesetImpl=n},883:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AStarPathFinder=void 0;var n=i(30),o=i(482),r=function(){function t(t){this.objectPool=[],this.openList=[],this.parentList=[],this.pathFindCounter=1,this.width=t.getMapWidth(),this.height=t.getMapHeight(),this.map=t,this.open=new Array,this.closed=new Array;for(var e=0;e<this.width*this.height;e++){for(var i=new Array,n=new Array,o=0;o<5;o++)i.push(0),n.push(0);this.open.push(i),this.closed.push(n)}}return t.prototype.clear=function(){for(var t=0,e=this.openList;t<e.length;t++){var i=e[t];this.objectPool.push(i)}for(var n=0,o=this.parentList;n<o.length;n++)i=o[n],this.objectPool.push(i);this.parentList=[],this.openList=[],this.pathFindCounter++},t.prototype.generatePath=function(t){for(var e=t,i=new o.Path;null!=e;)i.add(e.x,e.y),e=e.parent;return i},t.prototype.blocked=function(t,e,i,n){return!this.map.locationDiscovered(i,n)||this.map.blocked(this.mover,null,t,e,i,n,this.atTarget(i,n))},t.prototype.atTarget=function(t,e){for(var i=0;i<this.tx.length;i++){var n=this.tx[i],o=this.ty[i];if(n>=t&&n<t+this.mover.getTilesWidth()&&o>=e&&o<e+this.mover.getTilesHeight())return!0}return!1},t.prototype.findPath=function(t,e,i,n,o,r){e=Math.floor(e),i=Math.floor(i),this.max=r,this.mover=t,this.tx=[],this.ty=[],this.cx=e+n/2,this.cy=i+o/2;for(var s=0;s<n;s++)this.tx.push(e+s),this.ty.push(i),o>1&&(this.tx.push(e+s),this.ty.push(i+o-1));if(o>2)for(s=1;s<o-1;s++)this.tx.push(e),this.ty.push(i+s),n>1&&(this.tx.push(e+n-1),this.ty.push(i+s));if(0===this.tx.length)return null;for(this.clear(),this.addLocation(null,Math.floor(t.getTileMapX()),Math.floor(t.getTileMapY()));this.openList.length>0;){var a=this.openList[0];if(this.openList.splice(0,1),this.atTarget(a.x,a.y))return this.generatePath(a);this.addLocation(a,a.x+1,a.y),this.addLocation(a,a.x-1,a.y),this.addLocation(a,a.x,a.y+1),this.addLocation(a,a.x,a.y-1),this.parentList.push(a)}return null},t.prototype.addLocation=function(e,i,n){var o=i=Math.floor(i),r=n=Math.floor(n),s=t.NONE;if(null!=e&&(o=e.x,(r=e.y)+1==n&&(s=t.NORTH_TO_SOUTH),r-1==n&&(s=t.SOUTH_TO_NORTH),o+1==i&&(s=t.WEST_TO_EAST),o-1==i&&(s=t.EAST_TO_WEST)),this.map.validLocation(i,n)&&this.open[i+n*this.width][s]!=this.pathFindCounter&&this.closed[i+n*this.width][s]!=this.pathFindCounter)if(null!=e&&e.depth>this.max)this.closed[i+n*this.width][s]=this.pathFindCounter;else if(this.map.locationDiscovered(i,n))if(this.blocked(o,r,i,n))this.closed[i+n*this.width][s]=this.pathFindCounter;else{this.open[i+n*this.width][s]=this.pathFindCounter;var a=Math.abs(this.cx-i),h=Math.abs(this.cy-n),u=this.createMapNode(i,n,e,a*a+h*h),l=t.binarySearch(this.openList,u.h);this.openList.splice(l,0,u)}else this.closed[i+n*this.width][s]=this.pathFindCounter},t.binarySearch=function(t,e){for(var i=-1,n=t.length;1+i<n;){var o=i+(n-i>>1);t[o].h>e?n=o:i=o}return n},t.prototype.createMapNode=function(t,e,i,o){if(0==this.objectPool.length){var r=new n.MapNode;this.objectPool.push(r)}var s=this.objectPool[0];return this.objectPool.splice(0,1),s.x=t,s.y=e,s.parent=i,s.h=o,s.depth=null!=i?i.depth+1:0,s},t.NORTH_TO_SOUTH=0,t.EAST_TO_WEST=1,t.SOUTH_TO_NORTH=2,t.WEST_TO_EAST=3,t.NONE=4,t}();e.AStarPathFinder=r},30:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MapNode=void 0;e.MapNode=function(){}},482:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Path=void 0;var n=i(844),o=function(){function t(){this.steps=new Array}return t.prototype.add=function(t,e){this.steps.splice(0,0,new n.Step(t,e))},t.prototype.getLastStep=function(){return this.steps[this.steps.length-1]},t.prototype.pop=function(){var t=this.steps[0];return this.steps.splice(0,1),t},t}();e.Path=o},844:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Step=void 0;e.Step=function(t,e){this.x=t,this.y=e}},181:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0}),e.LDTKWorld=void 0;var r=i(963),s=i(850),a=i(7),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.initOnFirstClick=function(){},e.prototype.load=function(t,i){var n=this;return i(t).then((function(t){n.gridSize=t.defaultGridSize;var o=t.defs.tilesets[0];n.tilesetScanline=o.pxWid/o.tileGridSize,n.tilesetSize=o.tileGridSize;var r=t.levels;if(t.worlds&&t.worlds.length>0){r=[];for(var s=0,h=t.worlds;s<h.length;s++){var u=h[s];r=r.concat(u.levels)}}for(var l=[],c=function(t){var o=new a.MapLevel(n,t.identifier);o.worldX=t.worldX,o.worldY=t.worldY;for(var r=0,s=t.fieldInstances;r<s.length;r++){var h=s[r];o.fields[h.__identifier]=h.__value}var u=void 0;if(t.layerInstances)u=Promise.resolve(t);else{if(!t.externalRelPath)throw new Error("Unknown LDTK file format");u=i(t.externalRelPath)}l.push(u.then((function(i){return e.loadLayers(o,i.layerInstances),o.layers.length>0?(o.width=o.layers[0].width,o.height=o.layers[0].height):(o.width=t.pxWid/n.gridSize,o.height=t.pxHei/n.gridSize),n.levels[o.id]=o,o})))},p=0,d=t.levels;p<d.length;p++)c(d[p]);return Promise.all(l).then((function(t){return n.loaded=!0,n}))}))},e.loadLayers=function(t,e){for(var i=0,n=e;i<n.length;i++){var o=n[i];if("Entities"===o.__type)for(var a=0,h=o.entityInstances;a<h.length;a++){for(var u=h[a],l=new r.MapEntity(t,u.px[0]/o.__gridSize,u.px[1]/o.__gridSize,u.width/o.__gridSize,u.height/o.__gridSize,u.__identifier),c=0,p=u.fieldInstances;c<p.length;c++){var d=p[c];l.fields[d.__identifier]=d.__value}t.entities.push(l)}else{for(var f=new s.MapLayer(t,o.__identifier,o.__cWid,o.__cHei),g=t.world.tilesetScanline,y=t.world.tilesetSize,v=0,m=o.gridTiles;v<m.length;v++){var w=m[v],S=Math.floor(w.px[0]/o.__gridSize)+Math.floor(w.px[1]/o.__gridSize)*f.width,_=Math.floor(w.src[0]/y),M=Math.floor(w.src[1]/y)*g+_;f.tiles[S]=M+1}t.layers.splice(0,0,f),t.layerByName[f.name]=f}}},e}(i(449).MapWorld);e.LDTKWorld=h},963:function(t,e){var i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.MapEntity=void 0;var n=function(){function t(t,e,i,n,o,r){this.fields={},this.level=t,this.x=e,this.y=i,this.width=n,this.height=o,this.type=r}return t.prototype.copy=function(e){var n=new t(e,this.x,this.y,this.width,this.height,this.type);return n.fields=i({},this.fields),n},t}();e.MapEntity=n},850:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MapLayer=void 0;var i=function(){function t(t,e,i,n){this.name=e,this.level=t,this.width=i,this.height=n,this.tiles=[];for(var o=0;o<this.width*this.height;o++)this.tiles.push(0)}return t.prototype.set=function(t,e,i){if(!(t<0||e<0||t>=this.width||e>=this.height)){var n=t+e*this.width;this.tiles[n]=i}},t.prototype.get=function(t,e){if(t<0||e<0||t>=this.width||e>=this.height)return 0;var i=t+e*this.width;return this.tiles[i]},t.prototype.copy=function(e){for(var i=new t(e,this.name,this.width,this.height),n=0;n<this.width*this.height;n++)i.tiles[n]=this.tiles[n];return i},t}();e.MapLayer=i},7:function(t,e,i){var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.MapLevel=void 0;var o=i(449),r=function(){function t(t,e){this.layers=[],this.layerByName={},this.entities=[],this.fields={},this.worldX=0,this.worldY=0,this.world=t,this.id=e}return t.prototype.entitiesOfType=function(t){return this.entities.filter((function(e){return e.type===t}))},t.prototype.firstEntityOfType=function(t){return this.entities.find((function(e){return e.type===t}))},t.prototype.copy=function(e){var i=new o.MapWorld;i.gridSize=this.world.gridSize,i.loaded=this.world.loaded,i.tilesetScanline=this.world.tilesetScanline,i.tilesetSize=this.world.tilesetSize;var r=new t(i,e);r.width=this.width,r.height=this.height,r.worldX=this.worldX,r.worldY=this.worldY,r.fields=n({},this.fields);for(var s=0,a=this.layers;s<a.length;s++){var h=a[s].copy(r);r.layers.push(h),r.layerByName[h.name]=h}for(var u=0,l=this.entities;u<l.length;u++)h=l[u].copy(r),r.entities.push(h);return r},t}();e.MapLevel=r},449:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MapWorld=void 0;e.MapWorld=function(){this.levels={},this.gridSize=0,this.tilesetScanline=0,this.tilesetSize=0,this.loaded=!1}}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}var n={};return(()=>{var t=n;Object.defineProperty(t,"__esModule",{value:!0}),t.MapEntity=t.MapLayer=t.MapLevel=t.MapWorld=t.LDTKWorld=t.Step=t.Path=t.AStarPathFinder=t.Keys=t.BLUE=t.RED=t.GREEN=t.BLACK=t.WHITE=t.setSoundOn=t.setMusicOn=t.isSoundOn=t.isMusicOn=t.startGame=void 0;var e=i(634);Object.defineProperty(t,"startGame",{enumerable:!0,get:function(){return e.startGame}}),Object.defineProperty(t,"isMusicOn",{enumerable:!0,get:function(){return e.isMusicOn}}),Object.defineProperty(t,"isSoundOn",{enumerable:!0,get:function(){return e.isSoundOn}}),Object.defineProperty(t,"setMusicOn",{enumerable:!0,get:function(){return e.setMusicOn}}),Object.defineProperty(t,"setSoundOn",{enumerable:!0,get:function(){return e.setSoundOn}});var o=i(876);Object.defineProperty(t,"WHITE",{enumerable:!0,get:function(){return o.WHITE}}),Object.defineProperty(t,"BLACK",{enumerable:!0,get:function(){return o.BLACK}}),Object.defineProperty(t,"GREEN",{enumerable:!0,get:function(){return o.GREEN}}),Object.defineProperty(t,"RED",{enumerable:!0,get:function(){return o.RED}}),Object.defineProperty(t,"BLUE",{enumerable:!0,get:function(){return o.BLUE}});var r=i(705);Object.defineProperty(t,"Keys",{enumerable:!0,get:function(){return r.Keys}});var s=i(883);Object.defineProperty(t,"AStarPathFinder",{enumerable:!0,get:function(){return s.AStarPathFinder}});var a=i(482);Object.defineProperty(t,"Path",{enumerable:!0,get:function(){return a.Path}});var h=i(844);Object.defineProperty(t,"Step",{enumerable:!0,get:function(){return h.Step}});var u=i(181);Object.defineProperty(t,"LDTKWorld",{enumerable:!0,get:function(){return u.LDTKWorld}});var l=i(449);Object.defineProperty(t,"MapWorld",{enumerable:!0,get:function(){return l.MapWorld}});var c=i(7);Object.defineProperty(t,"MapLevel",{enumerable:!0,get:function(){return c.MapLevel}});var p=i(850);Object.defineProperty(t,"MapLayer",{enumerable:!0,get:function(){return p.MapLayer}});var d=i(963);Object.defineProperty(t,"MapEntity",{enumerable:!0,get:function(){return d.MapEntity}})})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ndXRlL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL0dyYXBoaWNzLnRzIiwid2VicGFjazovL2d1dGUvLi9zcmMvR3V0ZS50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL0tleXMudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9pbXBsL0JpdG1hcEltcGwudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9pbXBsL0ZvbnRJbXBsLnRzIiwid2VicGFjazovL2d1dGUvLi9zcmMvaW1wbC9HcmFwaGljc0ltcGwudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9pbXBsL1NvdW5kSW1wbC50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL2ltcGwvVGlsZXNldEltcGwudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy9wYXRoL0FTdGFyUGF0aEZpbmRlci50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3BhdGgvTWFwTm9kZS50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3BhdGgvUGF0aC50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3BhdGgvU3RlcC50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3RpbGVtYXBzL0xEVEtXb3JsZC50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3RpbGVtYXBzL01hcEVudGl0eS50cyIsIndlYnBhY2s6Ly9ndXRlLy4vc3JjL3RpbGVtYXBzL01hcExheWVyLnRzIiwid2VicGFjazovL2d1dGUvLi9zcmMvdGlsZW1hcHMvTWFwTGV2ZWwudHMiLCJ3ZWJwYWNrOi8vZ3V0ZS8uL3NyYy90aWxlbWFwcy9NYXBXb3JsZC50cyIsIndlYnBhY2s6Ly9ndXRlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2d1dGUvLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJCTFVFIiwiR1JFRU4iLCJSRUQiLCJCTEFDSyIsIldISVRFIiwic3RhcnRHYW1lIiwic2V0TXVzaWNPbiIsInNldFNvdW5kT24iLCJpc011c2ljT24iLCJpc1NvdW5kT24iLCJCaXRtYXBJbXBsXzEiLCJGb250SW1wbF8xIiwiR3JhcGhpY3NJbXBsXzEiLCJTb3VuZEltcGxfMSIsIlRpbGVzZXRJbXBsXzEiLCJMRFRLV29ybGRfMSIsIlNPVU5EX09OIiwiTVVTSUNfT04iLCJvbiIsIlNvdW5kSW1wbCIsIkNVUlJFTlRfTVVTSUMiLCJzdG9wIiwicGxheSIsInZvbHVtZSIsImdhbWUiLCJHYW1lTG9vcCIsInN0YXJ0IiwidGhpcyIsInJlc291cmNlcyIsImxhc3RGcmFtZSIsImluaXRlZCIsInByb3RvdHlwZSIsImdldEdyYXBoaWNzIiwiZ3JhcGhpY3MiLCJyZXNvdXJjZXNSZW1haW5pbmciLCJmaWx0ZXIiLCJyIiwibG9hZGVkIiwibGVuZ3RoIiwicmVzb3VyY2VzVG90YWwiLCJhbGxSZXNvdXJjZXNMb2FkZWQiLCJfaSIsIl9hIiwiaW5pdFJlc291cmNlc09uRmlyc3RDbGljayIsImluaXRPbkZpcnN0Q2xpY2siLCJtb3VzZU1vdmVIYW5kbGVyIiwieCIsInkiLCJpZCIsImNhbnZhcyIsImZvY3VzIiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsIk1hdGgiLCJmbG9vciIsIm9uTW91c2VNb3ZlIiwibW91c2VXaGVlbEhhbmRsZXIiLCJkZWx0YSIsIm9uTW91c2VXaGVlbCIsIm1vdXNlRG93bkhhbmRsZXIiLCJvbk1vdXNlRG93biIsIm1vdXNlVXBIYW5kbGVyIiwib25Nb3VzZVVwIiwia2V5RG93bkhhbmRsZXIiLCJrZXkiLCJvbktleURvd24iLCJrZXlVcEhhbmRsZXIiLCJvbktleVVwIiwiX3RoaXMiLCJHcmFwaGljc0ltcGwiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidGFyZ2V0VG91Y2hlcyIsInBhZ2VYIiwibGVmdCIsInBhZ2VZIiwidG9wIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJlIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImRlbHRhWSIsIm9mZnNldFgiLCJvZmZzZXRZIiwiYnV0dG9uIiwiY29kZSIsImluaXQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJsb29wIiwibm93IiwiRGF0ZSIsImdldFRpbWUiLCJhcHBseUZvbnQiLCJ1cGRhdGUiLCJyZW5kZXIiLCJsb2FkTXVzaWMiLCJ1cmwiLCJzb3VuZCIsInB1c2giLCJsb2FkU291bmQiLCJsb2FkQml0bWFwIiwiYml0bWFwIiwiQml0bWFwSW1wbCIsImxvYWRTY2FsZWRUaWxlc2V0IiwidGlsZVdpZHRoIiwidGlsZUhlaWdodCIsInNjYWxlIiwidGlsZXNldCIsIlRpbGVzZXRJbXBsIiwibG9hZFRpbGVzZXQiLCJsb2FkRm9udCIsIm5hbWUiLCJGb250SW1wbCIsImxvYWRMRFRLIiwibG9jYXRvciIsIndvcmxkIiwiTERUS1dvcmxkIiwibG9hZCIsImZpbGUiLCJsb2FkSnNvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib25sb2FkIiwicmVzcG9uc2VUZXh0IiwicmVzdWx0IiwicmVwbGFjZSIsIm0iLCJnIiwiSlNPTiIsInBhcnNlIiwib25lcnJvciIsInNlbmQiLCJpc1J1bm5pbmdTdGFuZGFsb25lIiwibmF2aWdhdG9yIiwic3RhbmRhbG9uZSIsIm1hdGNoTWVkaWEiLCJpc1RhYmxldCIsImlzUGhvbmUiLCJpc0lPUyIsInRlc3QiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImlzTW9iaWxlIiwiaXNBbmRyb2lkIiwibWF0Y2giLCJpbmRleE9mIiwicGxhdGZvcm0iLCJpbmNsdWRlcyIsImRvY3VtZW50IiwibWF0Y2hlcyIsInNldFNvdW5kVm9sdW1lIiwidiIsImdldFNvdW5kVm9sdW1lIiwic2V0TXVzaWNWb2x1bWUiLCJnZXRNdXNpY1ZvbHVtZSIsIktleXMiLCJFU0NBUEVfS0VZIiwiRU5URVJfS0VZIiwiTEVGVF9LRVkiLCJSSUdIVF9LRVkiLCJVUF9LRVkiLCJET1dOX0tFWSIsIlNQQUNFX0tFWSIsIlNfS0VZIiwiTV9LRVkiLCJBX0tFWSIsIldfS0VZIiwiRF9LRVkiLCJDT05UUk9MX0tFWSIsIk1FVEFfS0VZIiwiQUxUX0tFWSIsIlRBQl9LRVkiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiZHJhdyIsImN0eCIsImRyYXdJbWFnZSIsImRyYXdTY2FsZWQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJhcHBseSIsInNpemUiLCJmb250IiwiaXNGaXJlZm94IiwiSW5zdGFsbFRyaWdnZXIiLCJPZmZzY3JlZW5JbXBsIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJzZXREaW1lbnNpb24iLCJDb3B5Qml0bWFwIiwiZ2V0RHJhd2FibGUiLCJmb250U2l6ZSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsIm1haW5DdHgiLCJ3ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJmb250U21vb3RoIiwid2Via2l0Rm9udFNtb290aGluZyIsImltYWdlUmVuZGVyaW5nIiwiY2xlYXIiLCJjbGVhclJlY3QiLCJjbGlwIiwic3F1YXJlUGF0aCIsIlBhdGgyRCIsImNyZWF0ZU9mZnNjcmVlbiIsIkVycm9yIiwiZHJhd1RvT2Zmc2NyZWVuIiwic2NyZWVuIiwiZHJhd09mZnNjcmVlbiIsImRyYXdTY2FsZWRPZmZzY3JlZW4iLCJmaXRTY3JlZW4iLCJwaXhlbFNjYWxlIiwicmVhbFdpZHRoIiwiaW5uZXJXaWR0aCIsInJlYWxIZWlnaHQiLCJpbm5lckhlaWdodCIsInZpcnR1YWxXaWR0aCIsInZpcnR1YWxIZWlnaHQiLCJwb3NpdGlvbiIsInNldEFscGhhIiwiYWxwaGEiLCJnbG9iYWxBbHBoYSIsImNvcHkiLCJzYXZlIiwicG9wIiwicmVzdG9yZSIsInRyYW5zbGF0ZSIsInNldEZvbnQiLCJzZXRGb250U2l6ZSIsImdldFN0cmluZ1dpZHRoIiwidGV4dCIsIm1lYXN1cmVUZXh0IiwiZHJhd1N0cmluZyIsImNvbCIsImZpbGxTdHlsZSIsImZpbGxUZXh0Iiwic2V0Q29tcG9zaXRlIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiZmlsbFJlY3QiLCJkcmF3TGluZSIsIngxIiwieTEiLCJ4MiIsInkyIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJkcmF3Qml0bWFwIiwiZHJhd1NjYWxlZEJpdG1hcCIsIkF1ZGlvQ29udGV4dCIsIkFVRElPX0NPTlRFWFQiLCJHdXRlXzEiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJoaWRkZW4iLCJDVVJSRU5UX0xPT1BTIiwibXVzaWMiLCJsb29wZWQiLCJyZXNwb25zZVR5cGUiLCJhcnJheUJ1ZmZlciIsInJlc3BvbnNlIiwiZGF0YSIsInRyeUxvYWQiLCJzb3VuZFZvbHVtZSIsImdhaW4iLCJsaW5lYXJSYW1wVG9WYWx1ZUF0VGltZSIsImN1cnJlbnRUaW1lIiwibXVzaWNWb2x1bWUiLCJkZWNvZGVBdWRpb0RhdGEiLCJidWZmZXIiLCJyZXN1bWUiLCJzb3VyY2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJjcmVhdGVHYWluIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwicmVtb3ZlIiwidGVtcFNvdXJjZV8xIiwic2V0VGltZW91dCIsImluZGV4IiwiZmluZEluZGV4IiwiYSIsInNwbGljZSIsIlRpbGUiLCJiaXRtYXBzIiwic2NhbmxpbmUiLCJ0aWxlQ291bnQiLCJ0aW50cyIsIm9uTG9hZGVkIiwib3JpZ2luYWxUaWxlV2lkdGgiLCJvcmlnaW5hbFRpbGVIZWlnaHQiLCJkZXB0aCIsImdldFRpbGVzQWNyb3NzIiwiZ2V0VGlsZVdpZHRoIiwiZ2V0VGlsZUhlaWdodCIsImdldFRpbGVDb3VudCIsImdldFRpbGUiLCJ0aWxlIiwiZ2V0VGludGVkVGlsZSIsInRpbnROYW1lIiwidGludCIsImdldEltYWdlRGF0YSIsImkiLCJhdmciLCJwdXRJbWFnZURhdGEiLCJ0b0RhdGFVUkwiLCJBU3RhclBhdGhGaW5kZXIiLCJNYXBOb2RlXzEiLCJQYXRoXzEiLCJtYXAiLCJvYmplY3RQb29sIiwib3Blbkxpc3QiLCJwYXJlbnRMaXN0IiwicGF0aEZpbmRDb3VudGVyIiwiZ2V0TWFwV2lkdGgiLCJnZXRNYXBIZWlnaHQiLCJBcnJheSIsImNsb3NlZCIsIm8iLCJjIiwiaiIsIm5vZGUiLCJfYiIsIl9jIiwiZ2VuZXJhdGVQYXRoIiwiY3VycmVudCIsInBhdGgiLCJQYXRoIiwiYWRkIiwicGFyZW50IiwiYmxvY2tlZCIsInN4Iiwic3kiLCJsb2NhdGlvbkRpc2NvdmVyZWQiLCJtb3ZlciIsImF0VGFyZ2V0IiwidHgiLCJ0eSIsImdldFRpbGVzV2lkdGgiLCJnZXRUaWxlc0hlaWdodCIsImZpbmRQYXRoIiwibWF4IiwiY3giLCJjeSIsImFkZExvY2F0aW9uIiwiZ2V0VGlsZU1hcFgiLCJnZXRUaWxlTWFwWSIsImJlc3QiLCJkaXIiLCJOT05FIiwiTk9SVEhfVE9fU09VVEgiLCJTT1VUSF9UT19OT1JUSCIsIldFU1RfVE9fRUFTVCIsIkVBU1RfVE9fV0VTVCIsInZhbGlkTG9jYXRpb24iLCJkeCIsImFicyIsImR5IiwiY3JlYXRlTWFwTm9kZSIsImJpbmFyeVNlYXJjaCIsImgiLCJhcnJheSIsImxvIiwiaGkiLCJtaSIsIm4iLCJNYXBOb2RlIiwiU3RlcF8xIiwic3RlcHMiLCJTdGVwIiwiZ2V0TGFzdFN0ZXAiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiZCIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiTWFwRW50aXR5XzEiLCJNYXBMYXllcl8xIiwiTWFwTGV2ZWxfMSIsIl9zdXBlciIsImFyZ3VtZW50cyIsImxvYWRlciIsInRoZW4iLCJqc29uIiwiZ3JpZFNpemUiLCJkZWZhdWx0R3JpZFNpemUiLCJkZWZzIiwidGlsZXNldHMiLCJ0aWxlc2V0U2NhbmxpbmUiLCJweFdpZCIsInRpbGVHcmlkU2l6ZSIsInRpbGVzZXRTaXplIiwibGV2ZWxzIiwid29ybGRzIiwiY29uY2F0IiwiYXN5bmNMZXZlbHMiLCJfbG9vcF8xIiwibGV2ZWxEYXRhIiwibGV2ZWwiLCJNYXBMZXZlbCIsImlkZW50aWZpZXIiLCJ3b3JsZFgiLCJ3b3JsZFkiLCJfZCIsIl9lIiwiZmllbGRJbnN0YW5jZXMiLCJmaWVsZEluc3RhbmNlIiwiZmllbGRzIiwiX19pZGVudGlmaWVyIiwiX192YWx1ZSIsImxheWVycyIsImxheWVySW5zdGFuY2VzIiwiZXh0ZXJuYWxSZWxQYXRoIiwibG9hZExheWVycyIsInB4SGVpIiwiYWxsIiwibGF5ZXJJbnN0YW5jZXNfMSIsImxheWVyRGF0YSIsIl9fdHlwZSIsImVudGl0eUluc3RhbmNlcyIsImVudGl0eURhdGEiLCJlbnRpdHkiLCJNYXBFbnRpdHkiLCJweCIsIl9fZ3JpZFNpemUiLCJlbnRpdGllcyIsImxheWVyIiwiTWFwTGF5ZXIiLCJfX2NXaWQiLCJfX2NIZWkiLCJ0aWxlU2l6ZSIsIl9mIiwiZ3JpZFRpbGVzIiwicG9zSW5kZXgiLCJ0aWxlSW5kZXgiLCJ0aWxlcyIsImxheWVyQnlOYW1lIiwiTWFwV29ybGQiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJzIiwidHlwZSIsInNldCIsImdldCIsIk1hcFdvcmxkXzEiLCJlbnRpdGllc09mVHlwZSIsImZpcnN0RW50aXR5T2ZUeXBlIiwiZmluZCIsIndvcmxkQ29weSIsImxldmVsQ29weSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJlbnVtZXJhYmxlIiwiR3JhcGhpY3NfMSIsIktleXNfMSIsIkFTdGFyUGF0aEZpbmRlcl8xIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLEdBQUlILEdBQ2UsaUJBQVpDLFFBQ2RBLFFBQWMsS0FBSUQsSUFFbEJELEVBQVcsS0FBSUMsSUFSakIsQ0FTR0ssTUFBTSxXQUNULE0sc0NDVEFDLE9BQU9DLGVBQWVOLEVBQVMsYUFBYyxDQUFFTyxPQUFPLElBQ3REUCxFQUFRUSxLQUFPUixFQUFRUyxNQUFRVCxFQUFRVSxJQUFNVixFQUFRVyxNQUFRWCxFQUFRWSxXQUFRLEVBQzdFWixFQUFRWSxNQUFRLFFBQ2hCWixFQUFRVyxNQUFRLFFBQ2hCWCxFQUFRVSxJQUFNLE1BQ2RWLEVBQVFTLE1BQVEsUUFDaEJULEVBQVFRLEtBQU8sUSxjQ05mSCxPQUFPQyxlQUFlTixFQUFTLGFBQWMsQ0FBRU8sT0FBTyxJQUN0RFAsRUFBUWEsVUFBWWIsRUFBUWMsV0FBYWQsRUFBUWUsV0FBYWYsRUFBUWdCLFVBQVloQixFQUFRaUIsZUFBWSxFQUN0RyxJQUFJQyxFQUFlLEVBQVEsS0FDdkJDLEVBQWEsRUFBUSxLQUNyQkMsRUFBaUIsRUFBUSxLQUN6QkMsRUFBYyxFQUFRLEtBQ3RCQyxFQUFnQixFQUFRLElBQ3hCQyxFQUFjLEVBQVEsS0FFdEJDLEdBQVcsRUFDWEMsR0FBVyxFQUlmekIsRUFBUWlCLFVBSFIsV0FDSSxPQUFPTyxHQU1YeEIsRUFBUWdCLFVBSFIsV0FDSSxPQUFPUyxHQU1YekIsRUFBUWUsV0FIUixTQUFvQlcsR0FDaEJGLEVBQVdFLEdBaUJmMUIsRUFBUWMsV0FkUixTQUFvQlksSUFDWEEsR0FBTUQsSUFDUEEsR0FBVyxFQUNQSixFQUFZTSxVQUFVQyxlQUN0QlAsRUFBWU0sVUFBVUMsY0FBY0MsUUFHeENILElB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ZUFBZU4sRUFBUyxZQUFhLENBQUUyZSxZQUFZLEVBQU1iLElBQUssV0FBYyxPQUFPcEUsRUFBWThDLGMiLCJmaWxlIjoiaW5kZXgtbWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZ3V0ZVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJndXRlXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJMVUUgPSBleHBvcnRzLkdSRUVOID0gZXhwb3J0cy5SRUQgPSBleHBvcnRzLkJMQUNLID0gZXhwb3J0cy5XSElURSA9IHZvaWQgMDtcbmV4cG9ydHMuV0hJVEUgPSBcIndoaXRlXCI7XG5leHBvcnRzLkJMQUNLID0gXCJibGFja1wiO1xuZXhwb3J0cy5SRUQgPSBcInJlZFwiO1xuZXhwb3J0cy5HUkVFTiA9IFwiZ3JlZW5cIjtcbmV4cG9ydHMuQkxVRSA9IFwiYmx1ZVwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YXJ0R2FtZSA9IGV4cG9ydHMuc2V0TXVzaWNPbiA9IGV4cG9ydHMuc2V0U291bmRPbiA9IGV4cG9ydHMuaXNNdXNpY09uID0gZXhwb3J0cy5pc1NvdW5kT24gPSB2b2lkIDA7XG52YXIgQml0bWFwSW1wbF8xID0gcmVxdWlyZShcIi4vaW1wbC9CaXRtYXBJbXBsXCIpO1xudmFyIEZvbnRJbXBsXzEgPSByZXF1aXJlKFwiLi9pbXBsL0ZvbnRJbXBsXCIpO1xudmFyIEdyYXBoaWNzSW1wbF8xID0gcmVxdWlyZShcIi4vaW1wbC9HcmFwaGljc0ltcGxcIik7XG52YXIgU291bmRJbXBsXzEgPSByZXF1aXJlKFwiLi9pbXBsL1NvdW5kSW1wbFwiKTtcbnZhciBUaWxlc2V0SW1wbF8xID0gcmVxdWlyZShcIi4vaW1wbC9UaWxlc2V0SW1wbFwiKTtcbnZhciBMRFRLV29ybGRfMSA9IHJlcXVpcmUoXCIuL3RpbGVtYXBzL0xEVEtXb3JsZFwiKTtcbnZhciBHQU1FX0xPT1A7XG52YXIgU09VTkRfT04gPSB0cnVlO1xudmFyIE1VU0lDX09OID0gdHJ1ZTtcbmZ1bmN0aW9uIGlzU291bmRPbigpIHtcbiAgICByZXR1cm4gU09VTkRfT047XG59XG5leHBvcnRzLmlzU291bmRPbiA9IGlzU291bmRPbjtcbmZ1bmN0aW9uIGlzTXVzaWNPbigpIHtcbiAgICByZXR1cm4gTVVTSUNfT047XG59XG5leHBvcnRzLmlzTXVzaWNPbiA9IGlzTXVzaWNPbjtcbmZ1bmN0aW9uIHNldFNvdW5kT24ob24pIHtcbiAgICBTT1VORF9PTiA9IG9uO1xufVxuZXhwb3J0cy5zZXRTb3VuZE9uID0gc2V0U291bmRPbjtcbmZ1bmN0aW9uIHNldE11c2ljT24ob24pIHtcbiAgICBpZiAoIW9uICYmIE1VU0lDX09OKSB7XG4gICAgICAgIE1VU0lDX09OID0gZmFsc2U7XG4gICAgICAgIGlmIChTb3VuZEltcGxfMS5Tb3VuZEltcGwuQ1VSUkVOVF9NVVNJQykge1xuICAgICAgICAgICAgU291bmRJbXBsXzEuU291bmRJbXBsLkNVUlJFTlRfTVVTSUMuc3RvcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvbiAmJiAhTVVTSUNfT04pIHtcbiAgICAgICAgTVVTSUNfT04gPSB0cnVlO1xuICAgICAgICBpZiAoU291bmRJbXBsXzEuU291bmRJbXBsLkNVUlJFTlRfTVVTSUMpIHtcbiAgICAgICAgICAgIFNvdW5kSW1wbF8xLlNvdW5kSW1wbC5DVVJSRU5UX01VU0lDLnBsYXkoU291bmRJbXBsXzEuU291bmRJbXBsLkNVUlJFTlRfTVVTSUMudm9sdW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuc2V0TXVzaWNPbiA9IHNldE11c2ljT247XG5mdW5jdGlvbiBzdGFydEdhbWUoZ2FtZSkge1xuICAgIEdBTUVfTE9PUCA9IG5ldyBHYW1lTG9vcCgpLnN0YXJ0KGdhbWUpO1xufVxuZXhwb3J0cy5zdGFydEdhbWUgPSBzdGFydEdhbWU7XG52YXIgR2FtZUxvb3AgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR2FtZUxvb3AoKSB7XG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gW107XG4gICAgICAgIHRoaXMubGFzdEZyYW1lID0gMDtcbiAgICAgICAgdGhpcy5pbml0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLmdldEdyYXBoaWNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmFwaGljcztcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5yZXNvdXJjZXNSZW1haW5pbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc291cmNlcy5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuICFyLmxvYWRlZDsgfSkubGVuZ3RoO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLnJlc291cmNlc1RvdGFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNvdXJjZXMubGVuZ3RoO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLmFsbFJlc291cmNlc0xvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMucmVzb3VyY2VzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHJlc291cmNlID0gX2FbX2ldO1xuICAgICAgICAgICAgaWYgKCFyZXNvdXJjZS5sb2FkZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUuaW5pdFJlc291cmNlc09uRmlyc3RDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFsbFJlc291cmNlc0xvYWRlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmluaXRlZCkge1xuICAgICAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMucmVzb3VyY2VzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICByZXNvdXJjZS5pbml0T25GaXJzdENsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5tb3VzZU1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKHgsIHksIGlkKSB7XG4gICAgICAgIGlmIChpZCA9PT0gdm9pZCAwKSB7IGlkID0gMDsgfVxuICAgICAgICB0aGlzLmluaXRSZXNvdXJjZXNPbkZpcnN0Q2xpY2soKTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuZ3JhcGhpY3MuY2FudmFzO1xuICAgICAgICBjYW52YXMuZm9jdXMoKTtcbiAgICAgICAgdmFyIHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICAgICAgeCA9IE1hdGguZmxvb3IoKHggLyB3aWR0aCkgKiBjYW52YXMud2lkdGgpO1xuICAgICAgICB5ID0gTWF0aC5mbG9vcigoeSAvIGhlaWdodCkgKiBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5nYW1lLm9uTW91c2VNb3ZlKHRoaXMsIHgsIHkpO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLm1vdXNlV2hlZWxIYW5kbGVyID0gZnVuY3Rpb24gKGRlbHRhKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5vbk1vdXNlV2hlZWwodGhpcywgZGVsdGEpO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLm1vdXNlRG93bkhhbmRsZXIgPSBmdW5jdGlvbiAoeCwgeSwgaWQpIHtcbiAgICAgICAgaWYgKGlkID09PSB2b2lkIDApIHsgaWQgPSAwOyB9XG4gICAgICAgIHRoaXMuaW5pdFJlc291cmNlc09uRmlyc3RDbGljaygpO1xuICAgICAgICB2YXIgY2FudmFzID0gdGhpcy5ncmFwaGljcy5jYW52YXM7XG4gICAgICAgIGNhbnZhcy5mb2N1cygpO1xuICAgICAgICB2YXIgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICB4ID0gTWF0aC5mbG9vcigoeCAvIHdpZHRoKSAqIGNhbnZhcy53aWR0aCk7XG4gICAgICAgIHkgPSBNYXRoLmZsb29yKCh5IC8gaGVpZ2h0KSAqIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmdhbWUub25Nb3VzZURvd24odGhpcywgeCwgeSwgaWQpO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLm1vdXNlVXBIYW5kbGVyID0gZnVuY3Rpb24gKHgsIHksIGlkKSB7XG4gICAgICAgIGlmIChpZCA9PT0gdm9pZCAwKSB7IGlkID0gMDsgfVxuICAgICAgICB0aGlzLmluaXRSZXNvdXJjZXNPbkZpcnN0Q2xpY2soKTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuZ3JhcGhpY3MuY2FudmFzO1xuICAgICAgICB2YXIgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICB4ID0gTWF0aC5mbG9vcigoeCAvIHdpZHRoKSAqIGNhbnZhcy53aWR0aCk7XG4gICAgICAgIHkgPSBNYXRoLmZsb29yKCh5IC8gaGVpZ2h0KSAqIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmdhbWUub25Nb3VzZVVwKHRoaXMsIHgsIHksIGlkKTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5rZXlEb3duSGFuZGxlciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdGhpcy5pbml0UmVzb3VyY2VzT25GaXJzdENsaWNrKCk7XG4gICAgICAgIHRoaXMuZ2FtZS5vbktleURvd24odGhpcywga2V5KTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5rZXlVcEhhbmRsZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMuZ2FtZS5vbktleVVwKHRoaXMsIGtleSk7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoZ2FtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLmdyYXBoaWNzID0gbmV3IEdyYXBoaWNzSW1wbF8xLkdyYXBoaWNzSW1wbCgpO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IGV2ZW50LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBldmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIC0gcmVjdC5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgLSByZWN0LnRvcDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubW91c2VEb3duSGFuZGxlcih4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBldmVudC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gZXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCAtIHJlY3QubGVmdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBldmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIC0gcmVjdC50b3A7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1vdXNlTW92ZUhhbmRsZXIoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubW91c2VVcEhhbmRsZXIoMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBfdGhpcy5tb3VzZVdoZWVsSGFuZGxlcihldmVudC5kZWx0YVkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1vdXNlRG93bkhhbmRsZXIoZXZlbnQub2Zmc2V0WCwgZXZlbnQub2Zmc2V0WSwgZXZlbnQuYnV0dG9uKTtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1vdXNlTW92ZUhhbmRsZXIoZXZlbnQub2Zmc2V0WCwgZXZlbnQub2Zmc2V0WSk7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdyYXBoaWNzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5tb3VzZVVwSGFuZGxlcihldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZLCBldmVudC5idXR0b24pO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgX3RoaXMua2V5RG93bkhhbmRsZXIoZXZlbnQuY29kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgX3RoaXMua2V5VXBIYW5kbGVyKGV2ZW50LmNvZGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgZ2FtZS5pbml0KHRoaXMpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubG9vcCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgZGVsdGEgPSAwO1xuICAgICAgICBpZiAodGhpcy5sYXN0RnJhbWUgIT09IDApIHtcbiAgICAgICAgICAgIGRlbHRhID0gbm93IC0gdGhpcy5sYXN0RnJhbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0RnJhbWUgPSBub3c7XG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuYXBwbHlGb250KCk7XG4gICAgICAgIHRoaXMuZ2FtZS51cGRhdGUodGhpcywgZGVsdGEpO1xuICAgICAgICB0aGlzLmdhbWUucmVuZGVyKHRoaXMsIHRoaXMuZ3JhcGhpY3MpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubG9vcCgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5sb2FkTXVzaWMgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHZhciBzb3VuZCA9IG5ldyBTb3VuZEltcGxfMS5Tb3VuZEltcGwodXJsLCB0cnVlKTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMucHVzaChzb3VuZCk7XG4gICAgICAgIHJldHVybiBzb3VuZDtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5sb2FkU291bmQgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHZhciBzb3VuZCA9IG5ldyBTb3VuZEltcGxfMS5Tb3VuZEltcGwodXJsLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucmVzb3VyY2VzLnB1c2goc291bmQpO1xuICAgICAgICByZXR1cm4gc291bmQ7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9hZEJpdG1hcCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgdmFyIGJpdG1hcCA9IG5ldyBCaXRtYXBJbXBsXzEuQml0bWFwSW1wbCh1cmwpO1xuICAgICAgICB0aGlzLnJlc291cmNlcy5wdXNoKGJpdG1hcCk7XG4gICAgICAgIHJldHVybiBiaXRtYXA7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9hZFNjYWxlZFRpbGVzZXQgPSBmdW5jdGlvbiAodXJsLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQsIHNjYWxlKSB7XG4gICAgICAgIHZhciB0aWxlc2V0ID0gbmV3IFRpbGVzZXRJbXBsXzEuVGlsZXNldEltcGwodXJsLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQsIHNjYWxlKTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMucHVzaCh0aWxlc2V0KTtcbiAgICAgICAgcmV0dXJuIHRpbGVzZXQ7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9hZFRpbGVzZXQgPSBmdW5jdGlvbiAodXJsLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQpIHtcbiAgICAgICAgdmFyIHRpbGVzZXQgPSBuZXcgVGlsZXNldEltcGxfMS5UaWxlc2V0SW1wbCh1cmwsIHRpbGVXaWR0aCwgdGlsZUhlaWdodCwgMSk7XG4gICAgICAgIHRoaXMucmVzb3VyY2VzLnB1c2godGlsZXNldCk7XG4gICAgICAgIHJldHVybiB0aWxlc2V0O1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLmxvYWRGb250ID0gZnVuY3Rpb24gKHVybCwgbmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IEZvbnRJbXBsXzEuRm9udEltcGwodXJsLCBuYW1lKTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5sb2FkTERUSyA9IGZ1bmN0aW9uIChuYW1lLCBsb2NhdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB3b3JsZCA9IG5ldyBMRFRLV29ybGRfMS5MRFRLV29ybGQoKTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMucHVzaCh3b3JsZCk7XG4gICAgICAgIHJldHVybiB3b3JsZC5sb2FkKG5hbWUsIGZ1bmN0aW9uIChmaWxlKSB7IHJldHVybiBfdGhpcy5sb2FkSnNvbihsb2NhdG9yKGZpbGUpKTsgfSk7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUubG9hZEpzb24gPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXEub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xuICAgICAgICAgICAgcmVxLm9ubG9hZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXEucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZXEucmVzcG9uc2VUZXh0LnJlcGxhY2UoL1xcXFxcInxcIig/OlxcXFxcInxbXlwiXSkqXCJ8KFxcL1xcLy4qfFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pL2csIGZ1bmN0aW9uIChtLCBnKSB7IHJldHVybiBnID8gXCJcIiA6IG07IH0pO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVxLnNlbmQoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUuaXNSdW5uaW5nU3RhbmRhbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh3aW5kb3cubmF2aWdhdG9yLnN0YW5kYWxvbmUgPT09IHRydWUpIHx8ICh3aW5kb3cubWF0Y2hNZWRpYSgnKGRpc3BsYXktbW9kZTogc3RhbmRhbG9uZSknKS5tYXRjaGVzKTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5pc1RhYmxldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUGhvbmUoKSAmJiB0aGlzLmlzSU9TKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc1RhYmxldCA9IC8oaXBhZHx0YWJsZXR8KGFuZHJvaWQoPyEuKm1vYmlsZSkpfCh3aW5kb3dzKD8hLipwaG9uZSkoLip0b3VjaCkpfGtpbmRsZXxwbGF5Ym9va3xzaWxrfChwdWZmaW4oPyEuKihJUHxBUHxXUCkpKSkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgcmV0dXJuIGlzVGFibGV0O1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLmlzTW9iaWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0lPUygpIHx8IHRoaXMuaXNBbmRyb2lkKCk7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUuaXNBbmRyb2lkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZC9pKSAhPSBudWxsO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLmlzSU9TID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ2lQYWQgU2ltdWxhdG9yJyxcbiAgICAgICAgICAgICdpUGhvbmUgU2ltdWxhdG9yJyxcbiAgICAgICAgICAgICdpUG9kIFNpbXVsYXRvcicsXG4gICAgICAgICAgICAnaVBhZCcsXG4gICAgICAgICAgICAnaVBob25lJyxcbiAgICAgICAgICAgICdpUG9kJ1xuICAgICAgICBdLmluZGV4T2YobmF2aWdhdG9yLnBsYXRmb3JtKSA+PSAwXG4gICAgICAgICAgICAvLyBpUGFkIG9uIGlPUyAxMyBkZXRlY3Rpb25cbiAgICAgICAgICAgIHx8IChuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKFwiTWFjXCIpICYmIFwib250b3VjaGVuZFwiIGluIGRvY3VtZW50KTtcbiAgICB9O1xuICAgIEdhbWVMb29wLnByb3RvdHlwZS5pc1Bob25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0lPUygpICYmIHdpbmRvdy5tYXRjaE1lZGlhKFwib25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2MHB4KVwiKS5tYXRjaGVzO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLnNldFNvdW5kVm9sdW1lID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgU291bmRJbXBsXzEuU291bmRJbXBsLnNldFNvdW5kVm9sdW1lKHYpO1xuICAgIH07XG4gICAgR2FtZUxvb3AucHJvdG90eXBlLmdldFNvdW5kVm9sdW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gU291bmRJbXBsXzEuU291bmRJbXBsLmdldFNvdW5kVm9sdW1lKCk7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUuc2V0TXVzaWNWb2x1bWUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICBTb3VuZEltcGxfMS5Tb3VuZEltcGwuc2V0TXVzaWNWb2x1bWUodik7XG4gICAgfTtcbiAgICBHYW1lTG9vcC5wcm90b3R5cGUuZ2V0TXVzaWNWb2x1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTb3VuZEltcGxfMS5Tb3VuZEltcGwuZ2V0TXVzaWNWb2x1bWUoKTtcbiAgICB9O1xuICAgIHJldHVybiBHYW1lTG9vcDtcbn0oKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2V5cyA9IHZvaWQgMDtcbnZhciBLZXlzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEtleXMoKSB7XG4gICAgfVxuICAgIEtleXMuRVNDQVBFX0tFWSA9IFwiRXNjYXBlXCI7XG4gICAgS2V5cy5FTlRFUl9LRVkgPSBcIkVudGVyXCI7XG4gICAgS2V5cy5MRUZUX0tFWSA9IFwiQXJyb3dMZWZ0XCI7XG4gICAgS2V5cy5SSUdIVF9LRVkgPSBcIkFycm93UmlnaHRcIjtcbiAgICBLZXlzLlVQX0tFWSA9IFwiQXJyb3dVcFwiO1xuICAgIEtleXMuRE9XTl9LRVkgPSBcIkFycm93RG93blwiO1xuICAgIEtleXMuU1BBQ0VfS0VZID0gXCIgXCI7XG4gICAgS2V5cy5TX0tFWSA9IFwic1wiO1xuICAgIEtleXMuTV9LRVkgPSBcIm1cIjtcbiAgICBLZXlzLkFfS0VZID0gXCJhXCI7XG4gICAgS2V5cy5XX0tFWSA9IFwid1wiO1xuICAgIEtleXMuRF9LRVkgPSBcImRcIjtcbiAgICBLZXlzLkNPTlRST0xfS0VZID0gXCJDb250cm9sXCI7XG4gICAgS2V5cy5NRVRBX0tFWSA9IFwiTWV0YVwiO1xuICAgIEtleXMuQUxUX0tFWSA9IFwiQWx0XCI7XG4gICAgS2V5cy5UQUJfS0VZID0gXCJUYWJcIjtcbiAgICByZXR1cm4gS2V5cztcbn0oKSk7XG5leHBvcnRzLktleXMgPSBLZXlzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJpdG1hcEltcGwgPSB2b2lkIDA7XG52YXIgQml0bWFwSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCaXRtYXBJbXBsKHVybCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLndpZHRoID0gMDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLmxvYWRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMud2lkdGggPSBfdGhpcy5pbWFnZS53aWR0aDtcbiAgICAgICAgICAgIF90aGlzLmhlaWdodCA9IF90aGlzLmltYWdlLmhlaWdodDtcbiAgICAgICAgICAgIF90aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gdXJsO1xuICAgIH1cbiAgICBCaXRtYXBJbXBsLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKGN0eCwgeCwgeSkge1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIHgsIHkpO1xuICAgIH07XG4gICAgQml0bWFwSW1wbC5wcm90b3R5cGUuZHJhd1NjYWxlZCA9IGZ1bmN0aW9uIChjdHgsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9O1xuICAgIEJpdG1hcEltcGwucHJvdG90eXBlLmluaXRPbkZpcnN0Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gQml0bWFwSW1wbDtcbn0oKSk7XG5leHBvcnRzLkJpdG1hcEltcGwgPSBCaXRtYXBJbXBsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZvbnRJbXBsID0gdm9pZCAwO1xudmFyIEZvbnRJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZvbnRJbXBsKHVybCwgbmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIHN0eWxlLmlubmVySFRNTCA9IFwiQGZvbnQtZmFjZSB7IGZvbnQtZmFtaWx5OiBcIiArIG5hbWUgKyBcIjsgc3JjOiB1cmwoJ1wiICsgdXJsICsgXCInKTsgfSBib2R5IHsgZm9udC1mYW1pbHk6IFwiICsgbmFtZSArIFwiOyB9XCI7XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgICBGb250SW1wbC5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbiAoY3R4LCBzaXplKSB7XG4gICAgICAgIGN0eC5mb250ID0gc2l6ZSArIFwicHggXCIgKyB0aGlzLm5hbWU7XG4gICAgfTtcbiAgICByZXR1cm4gRm9udEltcGw7XG59KCkpO1xuZXhwb3J0cy5Gb250SW1wbCA9IEZvbnRJbXBsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdyYXBoaWNzSW1wbCA9IHZvaWQgMDtcbnZhciBGb250SW1wbF8xID0gcmVxdWlyZShcIi4vRm9udEltcGxcIik7XG52YXIgaXNGaXJlZm94ID0gdHlwZW9mIEluc3RhbGxUcmlnZ2VyICE9PSAndW5kZWZpbmVkJztcbnZhciBPZmZzY3JlZW5JbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9mZnNjcmVlbkltcGwoY2FudmFzLCBjdHgpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgIH1cbiAgICBPZmZzY3JlZW5JbXBsLnByb3RvdHlwZS5nZXRXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLndpZHRoO1xuICAgIH07XG4gICAgT2Zmc2NyZWVuSW1wbC5wcm90b3R5cGUuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMuaGVpZ2h0O1xuICAgIH07XG4gICAgT2Zmc2NyZWVuSW1wbC5wcm90b3R5cGUuc2V0RGltZW5zaW9uID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH07XG4gICAgcmV0dXJuIE9mZnNjcmVlbkltcGw7XG59KCkpO1xudmFyIENvcHlCaXRtYXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29weUJpdG1hcChjYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgIH1cbiAgICBDb3B5Qml0bWFwLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKGN0eCwgeCwgeSkge1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuY2FudmFzLCB4LCB5KTtcbiAgICB9O1xuICAgIENvcHlCaXRtYXAucHJvdG90eXBlLmRyYXdTY2FsZWQgPSBmdW5jdGlvbiAoY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXMsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH07XG4gICAgQ29weUJpdG1hcC5wcm90b3R5cGUuZ2V0RHJhd2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcztcbiAgICB9O1xuICAgIENvcHlCaXRtYXAucHJvdG90eXBlLmluaXRPbkZpcnN0Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gQ29weUJpdG1hcDtcbn0oKSk7XG52YXIgR3JhcGhpY3NJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdyYXBoaWNzSW1wbCgpIHtcbiAgICAgICAgdGhpcy5mb250U2l6ZSA9IDIwO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZWNhbnZhc1wiKTtcbiAgICAgICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIHRoaXMubWFpbkN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB0aGlzLmN0eC53ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmZvbnRTbW9vdGggPSBcIm5ldmVyXCI7XG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLndlYmtpdEZvbnRTbW9vdGhpbmcgPSBcIm5vbmVcIjtcbiAgICAgICAgaWYgKGlzRmlyZWZveCkge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUuaW1hZ2VSZW5kZXJpbmcgPSBcImNyaXNwLWVkZ2VzXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5zdHlsZS5pbWFnZVJlbmRlcmluZyA9IFwicGl4ZWxhdGVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mb250ID0gbmV3IEZvbnRJbXBsXzEuRm9udEltcGwoXCJmb250LnR0ZlwiLCBcIkd1dGVEZWZhdWx0XCIpO1xuICAgICAgICBpZiAodGhpcy5mb250KSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5Rm9udCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuY2xpcCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBzcXVhcmVQYXRoID0gbmV3IFBhdGgyRCgpO1xuICAgICAgICBzcXVhcmVQYXRoLnJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuY3R4LmNsaXAoc3F1YXJlUGF0aCk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmNyZWF0ZU9mZnNjcmVlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKTtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KCk7XG4gICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICBjdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjYW52YXMuc3R5bGUuZm9udFNtb290aCA9IFwibmV2ZXJcIjtcbiAgICAgICAgICAgIGNhbnZhcy5zdHlsZS53ZWJraXRGb250U21vb3RoaW5nID0gXCJub25lXCI7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE9mZnNjcmVlbkltcGwoY2FudmFzLCBjdHgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBvZmZzY3JlZW4gY2FudmFzXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmRyYXdUb09mZnNjcmVlbiA9IGZ1bmN0aW9uIChzY3JlZW4pIHtcbiAgICAgICAgaWYgKHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5jdHggPSBzY3JlZW4uY3R4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jdHggPSB0aGlzLm1haW5DdHg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuZHJhd09mZnNjcmVlbiA9IGZ1bmN0aW9uIChzY3JlZW4pIHtcbiAgICAgICAgdGhpcy5jdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2Uoc2NyZWVuLmNhbnZhcywgMCwgMCk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmRyYXdTY2FsZWRPZmZzY3JlZW4gPSBmdW5jdGlvbiAoc2NyZWVuLCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuY3R4LndlYmtpdEltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKHNjcmVlbi5jYW52YXMsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5jbGVhclJlY3QgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmZpdFNjcmVlbiA9IGZ1bmN0aW9uIChwaXhlbFNjYWxlKSB7XG4gICAgICAgIHZhciByZWFsV2lkdGggPSBNYXRoLmZsb29yKHdpbmRvdy5pbm5lcldpZHRoIC8gcGl4ZWxTY2FsZSkgKiBwaXhlbFNjYWxlO1xuICAgICAgICB2YXIgcmVhbEhlaWdodCA9IE1hdGguZmxvb3Iod2luZG93LmlubmVySGVpZ2h0IC8gcGl4ZWxTY2FsZSkgKiBwaXhlbFNjYWxlO1xuICAgICAgICB2YXIgdmlydHVhbFdpZHRoID0gcmVhbFdpZHRoIC8gcGl4ZWxTY2FsZTtcbiAgICAgICAgdmFyIHZpcnR1YWxIZWlnaHQgPSByZWFsSGVpZ2h0IC8gcGl4ZWxTY2FsZTtcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHZpcnR1YWxXaWR0aDtcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdmlydHVhbEhlaWdodDtcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUud2lkdGggPSByZWFsV2lkdGggKyBcInB4XCI7XG4gICAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmhlaWdodCA9IHJlYWxIZWlnaHQgKyBcInB4XCI7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLnNldEFscGhhID0gZnVuY3Rpb24gKGFscGhhKSB7XG4gICAgICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gYWxwaGE7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKTtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0KCk7XG4gICAgICAgIChfYSA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kcmF3SW1hZ2UodGhpcy5jYW52YXMsIDAsIDApO1xuICAgICAgICByZXR1cm4gbmV3IENvcHlCaXRtYXAoY2FudmFzKTtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy53aWR0aDtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMuaGVpZ2h0O1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS50cmFuc2xhdGUgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICB0aGlzLmN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLnNjYWxlID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdGhpcy5jdHguc2NhbGUoeCwgeSk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmFwcGx5Rm9udCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb250LmFwcGx5KHRoaXMuY3R4LCB0aGlzLmZvbnRTaXplKTtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuc2V0Rm9udCA9IGZ1bmN0aW9uIChmb250KSB7XG4gICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMuYXBwbHlGb250KCk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLnNldEZvbnRTaXplID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICAgICAgdGhpcy5mb250U2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMuYXBwbHlGb250KCk7XG4gICAgfTtcbiAgICBHcmFwaGljc0ltcGwucHJvdG90eXBlLmdldFN0cmluZ1dpZHRoID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5kcmF3U3RyaW5nID0gZnVuY3Rpb24gKHgsIHksIHRleHQsIGNvbCkge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2w7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KHRleHQsIHgsIHkpO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5zZXRDb21wb3NpdGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB0aGlzLmN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBuYW1lO1xuICAgIH07XG4gICAgR3JhcGhpY3NJbXBsLnByb3RvdHlwZS5maWxsUmVjdCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBjb2wpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gY29sO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuZHJhd0xpbmUgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIsIGNvbCwgd2lkdGgpIHtcbiAgICAgICAgaWYgKHdpZHRoID09PSB2b2lkIDApIHsgd2lkdGggPSAxOyB9XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gY29sO1xuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5jdHgubW92ZVRvKHgxLCB5MSk7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuZHJhd0JpdG1hcCA9IGZ1bmN0aW9uICh4LCB5LCBiaXRtYXApIHtcbiAgICAgICAgaWYgKCFiaXRtYXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGJpdG1hcC5kcmF3KHRoaXMuY3R4LCB4LCB5KTtcbiAgICB9O1xuICAgIEdyYXBoaWNzSW1wbC5wcm90b3R5cGUuZHJhd1NjYWxlZEJpdG1hcCA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBiaXRtYXApIHtcbiAgICAgICAgaWYgKCFiaXRtYXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGJpdG1hcC5kcmF3U2NhbGVkKHRoaXMuY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9O1xuICAgIHJldHVybiBHcmFwaGljc0ltcGw7XG59KCkpO1xuZXhwb3J0cy5HcmFwaGljc0ltcGwgPSBHcmFwaGljc0ltcGw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU291bmRJbXBsID0gdm9pZCAwO1xudmFyIEd1dGVfMSA9IHJlcXVpcmUoXCIuLi9HdXRlXCIpO1xudmFyIEF1ZGlvQ29udGV4dDtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgQXVkaW9Db250ZXh0ID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0O1xufVxudmFyIEFVRElPX0NPTlRFWFQ7XG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgIGlmIChHdXRlXzEuaXNNdXNpY09uKCkpIHtcbiAgICAgICAgaWYgKFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDKSB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgU291bmRJbXBsLkNVUlJFTlRfTVVTSUMuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgU291bmRJbXBsLkNVUlJFTlRfTVVTSUMucGxheShTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQy52b2x1bWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChHdXRlXzEuaXNTb3VuZE9uKCkpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IFNvdW5kSW1wbC5DVVJSRU5UX0xPT1BTOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGxvb3AgPSBfYVtfaV07XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgbG9vcC5zdG9wKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvb3AucGxheShsb29wLnZvbHVtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7XG59XG52YXIgU291bmRJbXBsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNvdW5kSW1wbCh1cmwsIG11c2ljKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudm9sdW1lID0gMTtcbiAgICAgICAgdGhpcy5tdXNpYyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvb3BlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5tdXNpYyA9IG11c2ljO1xuICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHJlcS5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgICAgIHJlcS5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBhcnJheUJ1ZmZlciA9IHJlcS5yZXNwb25zZTtcbiAgICAgICAgICAgIGlmIChhcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLmRhdGEgPSBhcnJheUJ1ZmZlcjtcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyeUxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmVxLnNlbmQoKTtcbiAgICB9XG4gICAgU291bmRJbXBsLnNldFNvdW5kVm9sdW1lID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgdGhpcy5zb3VuZFZvbHVtZSA9IHY7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLkNVUlJFTlRfTE9PUFM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbG9vcCA9IF9hW19pXTtcbiAgICAgICAgICAgIGxvb3AuZ2Fpbi5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKGxvb3Audm9sdW1lICogU291bmRJbXBsLnNvdW5kVm9sdW1lLCBBVURJT19DT05URVhULmN1cnJlbnRUaW1lICsgMC4yNSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNvdW5kSW1wbC5nZXRTb3VuZFZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291bmRWb2x1bWU7XG4gICAgfTtcbiAgICBTb3VuZEltcGwuc2V0TXVzaWNWb2x1bWUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICB0aGlzLm11c2ljVm9sdW1lID0gdjtcbiAgICAgICAgaWYgKFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDKSB7XG4gICAgICAgICAgICBpZiAoU291bmRJbXBsLkNVUlJFTlRfTVVTSUMuZ2Fpbikge1xuICAgICAgICAgICAgICAgIFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDLmdhaW4uZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZShTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQy52b2x1bWUgKiBTb3VuZEltcGwubXVzaWNWb2x1bWUsIEFVRElPX0NPTlRFWFQuY3VycmVudFRpbWUgKyAwLjI1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU291bmRJbXBsLmdldE11c2ljVm9sdW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tdXNpY1ZvbHVtZTtcbiAgICB9O1xuICAgIFNvdW5kSW1wbC5wcm90b3R5cGUudHJ5TG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKEFVRElPX0NPTlRFWFQgJiYgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIEFVRElPX0NPTlRFWFQuZGVjb2RlQXVkaW9EYXRhKHRoaXMuZGF0YSwgZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQyA9PT0gX3RoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnBsYXkoX3RoaXMudm9sdW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7IGNvbnNvbGUubG9nKFwiRmFpbGVkIHRvIGxvYWQ6IFwiICsgX3RoaXMudXJsKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGVjb2RlQXVkaW9EYXRhIGV4Y2VwdGlvbiBvbiBsb2FkaW5nIFwiICsgdGhpcy51cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTb3VuZEltcGwucHJvdG90eXBlLmluaXRPbkZpcnN0Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghQVVESU9fQ09OVEVYVCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBBVURJT19DT05URVhUID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIEFVRElPX0NPTlRFWFQucmVzdW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGVjb2RlQXVkaW9EYXRhIGV4Y2VwdGlvbiBvbiBjcmVhdGluZyBhdWRpbyBjb250ZXh0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJ5TG9hZCgpO1xuICAgIH07XG4gICAgU291bmRJbXBsLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKHZvbHVtZSwgbG9vcCkge1xuICAgICAgICBpZiAobG9vcCA9PT0gdm9pZCAwKSB7IGxvb3AgPSBmYWxzZTsgfVxuICAgICAgICB0aGlzLnZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMubXVzaWMpIHtcbiAgICAgICAgICAgICAgICBpZiAoU291bmRJbXBsLkNVUlJFTlRfTVVTSUMpIHtcbiAgICAgICAgICAgICAgICAgICAgU291bmRJbXBsLkNVUlJFTlRfTVVTSUMuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQyA9IHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubXVzaWMpIHtcbiAgICAgICAgICAgIGlmIChTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQyAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAgIGlmIChTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQykge1xuICAgICAgICAgICAgICAgICAgICBTb3VuZEltcGwuQ1VSUkVOVF9NVVNJQy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFNvdW5kSW1wbC5DVVJSRU5UX01VU0lDID0gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tdXNpYyAmJiAhR3V0ZV8xLmlzTXVzaWNPbigpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIUd1dGVfMS5pc1NvdW5kT24oKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc291cmNlID0gQVVESU9fQ09OVEVYVC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICAgICAgdGhpcy5zb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIHRoaXMuZ2FpbiA9IEFVRElPX0NPTlRFWFQuY3JlYXRlR2FpbigpO1xuICAgICAgICB0aGlzLnNvdXJjZS5jb25uZWN0KHRoaXMuZ2Fpbik7XG4gICAgICAgIHRoaXMuZ2Fpbi5jb25uZWN0KEFVRElPX0NPTlRFWFQuZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmxvb3BlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5tdXNpYyB8fCBsb29wKSB7XG4gICAgICAgICAgICB0aGlzLmdhaW4uZ2Fpbi52YWx1ZSA9IDA7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZS5sb29wID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubG9vcGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNvdXJjZS5zdGFydCgwKTtcbiAgICAgICAgaWYgKHRoaXMubXVzaWMgfHwgbG9vcCkge1xuICAgICAgICAgICAgdGhpcy5nYWluLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodm9sdW1lICogKGxvb3AgPyBTb3VuZEltcGwuc291bmRWb2x1bWUgOiBTb3VuZEltcGwubXVzaWNWb2x1bWUpLCBBVURJT19DT05URVhULmN1cnJlbnRUaW1lICsgMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdhaW4uZ2Fpbi52YWx1ZSA9IHZvbHVtZSAqIFNvdW5kSW1wbC5zb3VuZFZvbHVtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9vcCkge1xuICAgICAgICAgICAgU291bmRJbXBsLkNVUlJFTlRfTE9PUFMucHVzaCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU291bmRJbXBsLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKHJlbW92ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAocmVtb3ZlID09PSB2b2lkIDApIHsgcmVtb3ZlID0gdHJ1ZTsgfVxuICAgICAgICBpZiAodGhpcy5zb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxvb3BlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2Fpbi5nYWluLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKDAsIEFVRElPX0NPTlRFWFQuY3VycmVudFRpbWUgKyAzKTtcbiAgICAgICAgICAgICAgICB2YXIgdGVtcFNvdXJjZV8xID0gdGhpcy5zb3VyY2U7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBTb3VyY2VfMS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfSwgNDAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZS5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gU291bmRJbXBsLkNVUlJFTlRfTE9PUFMuZmluZEluZGV4KGZ1bmN0aW9uIChhKSB7IHJldHVybiBhID09PSBfdGhpczsgfSk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIFNvdW5kSW1wbC5DVVJSRU5UX0xPT1BTLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNvdW5kSW1wbC5DVVJSRU5UX0xPT1BTID0gW107XG4gICAgU291bmRJbXBsLnNvdW5kVm9sdW1lID0gMTtcbiAgICBTb3VuZEltcGwubXVzaWNWb2x1bWUgPSAxO1xuICAgIHJldHVybiBTb3VuZEltcGw7XG59KCkpO1xuZXhwb3J0cy5Tb3VuZEltcGwgPSBTb3VuZEltcGw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGlsZXNldEltcGwgPSB2b2lkIDA7XG52YXIgVGlsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaWxlKGNhbnZhcywgeCwgeSwgd2lkdGgsIGhlaWdodCwgc2NhbGUpIHtcbiAgICAgICAgdGhpcy5pbWFnZSA9IGNhbnZhcztcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgfVxuICAgIFRpbGUucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAoY3R4LCB4LCB5KSB7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgdGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB4LCB5LCB0aGlzLndpZHRoICogdGhpcy5zY2FsZSwgdGhpcy5oZWlnaHQgKiB0aGlzLnNjYWxlKTtcbiAgICB9O1xuICAgIFRpbGUucHJvdG90eXBlLmRyYXdTY2FsZWQgPSBmdW5jdGlvbiAoY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgdGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9O1xuICAgIFRpbGUucHJvdG90eXBlLmluaXRPbkZpcnN0Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICByZXR1cm4gVGlsZTtcbn0oKSk7XG52YXIgVGlsZXNldEltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGlsZXNldEltcGwodXJsLCB0aWxlV2lkdGgsIHRpbGVIZWlnaHQsIHNjYWxlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChzY2FsZSA9PT0gdm9pZCAwKSB7IHNjYWxlID0gMTsgfVxuICAgICAgICB0aGlzLmxvYWRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJpdG1hcHMgPSBbXTtcbiAgICAgICAgdGhpcy5zY2FubGluZSA9IDA7XG4gICAgICAgIHRoaXMudGlsZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy50aW50cyA9IHt9O1xuICAgICAgICB0aGlzLm9uTG9hZGVkID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICB0aGlzLnRpbGVXaWR0aCA9IHRoaXMub3JpZ2luYWxUaWxlV2lkdGggPSB0aWxlV2lkdGg7XG4gICAgICAgIHRoaXMudGlsZUhlaWdodCA9IHRoaXMub3JpZ2luYWxUaWxlSGVpZ2h0ID0gdGlsZUhlaWdodDtcbiAgICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuc2NhbmxpbmUgPSBNYXRoLmZsb29yKF90aGlzLmltYWdlLndpZHRoIC8gX3RoaXMudGlsZVdpZHRoKTtcbiAgICAgICAgICAgIHZhciBkZXB0aCA9IE1hdGguZmxvb3IoX3RoaXMuaW1hZ2UuaGVpZ2h0IC8gX3RoaXMudGlsZUhlaWdodCk7XG4gICAgICAgICAgICBfdGhpcy50aWxlQ291bnQgPSBkZXB0aCAqIF90aGlzLnNjYW5saW5lO1xuICAgICAgICAgICAgLy8gY3V0IHRoZSBpbWFnZSBpbnRvIHBpZWNlc1xuICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCBkZXB0aDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBfdGhpcy5zY2FubGluZTsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmJpdG1hcHMucHVzaChuZXcgVGlsZShfdGhpcy5pbWFnZSwgeCAqIF90aGlzLnRpbGVXaWR0aCwgeSAqIF90aGlzLnRpbGVIZWlnaHQsIF90aGlzLnRpbGVXaWR0aCwgX3RoaXMudGlsZUhlaWdodCwgc2NhbGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy50aWxlV2lkdGggKj0gc2NhbGU7XG4gICAgICAgICAgICBfdGhpcy50aWxlSGVpZ2h0ICo9IHNjYWxlO1xuICAgICAgICAgICAgX3RoaXMub25Mb2FkZWQoKTtcbiAgICAgICAgICAgIF90aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gdXJsO1xuICAgIH1cbiAgICBUaWxlc2V0SW1wbC5wcm90b3R5cGUuZ2V0VGlsZXNBY3Jvc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjYW5saW5lO1xuICAgIH07XG4gICAgVGlsZXNldEltcGwucHJvdG90eXBlLmdldFRpbGVXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZVdpZHRoO1xuICAgIH07XG4gICAgVGlsZXNldEltcGwucHJvdG90eXBlLmdldFRpbGVIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVIZWlnaHQ7XG4gICAgfTtcbiAgICBUaWxlc2V0SW1wbC5wcm90b3R5cGUuZ2V0VGlsZUNvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWxlQ291bnQ7XG4gICAgfTtcbiAgICBUaWxlc2V0SW1wbC5wcm90b3R5cGUuaW5pdE9uRmlyc3RDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuICAgIFRpbGVzZXRJbXBsLnByb3RvdHlwZS5nZXRUaWxlID0gZnVuY3Rpb24gKHRpbGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYml0bWFwc1t0aWxlXTtcbiAgICB9O1xuICAgIFRpbGVzZXRJbXBsLnByb3RvdHlwZS5nZXRUaW50ZWRUaWxlID0gZnVuY3Rpb24gKHRpbGUsIHRpbnROYW1lLCB0aW50KSB7XG4gICAgICAgIHZhciB4ID0gdGlsZSAlIHRoaXMuc2NhbmxpbmU7XG4gICAgICAgIHZhciB5ID0gTWF0aC5mbG9vcih0aWxlIC8gdGhpcy5zY2FubGluZSk7XG4gICAgICAgIHZhciBpbWFnZSA9IHRoaXMudGludHNbdGludE5hbWVdO1xuICAgICAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHRoaXMuaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gdGhpcy5pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xuICAgICAgICAgICAgICAgIHZhciBpZCA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVhdmUgYmxhY2sgYWxvbmVcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF2ZyA9IChpZC5kYXRhW2ldICsgaWQuZGF0YVtpICsgMV0gKyBpZC5kYXRhW2kgKyAyXSkgLyAzO1xuICAgICAgICAgICAgICAgICAgICBpZC5kYXRhW2ldID0gTWF0aC5mbG9vcihhdmcgKiB0aW50WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWQuZGF0YVtpICsgMV0gPSBNYXRoLmZsb29yKGF2ZyAqIHRpbnRbMV0pO1xuICAgICAgICAgICAgICAgICAgICBpZC5kYXRhW2kgKyAyXSA9IE1hdGguZmxvb3IoYXZnICogdGludFsyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5wdXRJbWFnZURhdGEoaWQsIDAsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgICAgICAgICAgIHRoaXMudGludHNbdGludE5hbWVdID0gaW1hZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUaWxlKGltYWdlLCB4ICogdGhpcy5vcmlnaW5hbFRpbGVXaWR0aCwgeSAqIHRoaXMub3JpZ2luYWxUaWxlSGVpZ2h0LCB0aGlzLm9yaWdpbmFsVGlsZVdpZHRoLCB0aGlzLm9yaWdpbmFsVGlsZUhlaWdodCwgdGhpcy5zY2FsZSk7XG4gICAgfTtcbiAgICByZXR1cm4gVGlsZXNldEltcGw7XG59KCkpO1xuZXhwb3J0cy5UaWxlc2V0SW1wbCA9IFRpbGVzZXRJbXBsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFTdGFyUGF0aEZpbmRlciA9IHZvaWQgMDtcbnZhciBNYXBOb2RlXzEgPSByZXF1aXJlKFwiLi9NYXBOb2RlXCIpO1xudmFyIFBhdGhfMSA9IHJlcXVpcmUoXCIuL1BhdGhcIik7XG52YXIgQVN0YXJQYXRoRmluZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFTdGFyUGF0aEZpbmRlcihtYXApIHtcbiAgICAgICAgdGhpcy5vYmplY3RQb29sID0gW107XG4gICAgICAgIHRoaXMub3Blbkxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5wYXJlbnRMaXN0ID0gW107XG4gICAgICAgIHRoaXMucGF0aEZpbmRDb3VudGVyID0gMTtcbiAgICAgICAgdGhpcy53aWR0aCA9IG1hcC5nZXRNYXBXaWR0aCgpO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG1hcC5nZXRNYXBIZWlnaHQoKTtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMub3BlbiA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IG5ldyBBcnJheSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMud2lkdGggKiB0aGlzLmhlaWdodDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgdmFyIGMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNTsgaisrKSB7XG4gICAgICAgICAgICAgICAgby5wdXNoKDApO1xuICAgICAgICAgICAgICAgIGMucHVzaCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub3Blbi5wdXNoKG8pO1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQucHVzaChjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBBU3RhclBhdGhGaW5kZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5vcGVuTGlzdDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gX2FbX2ldO1xuICAgICAgICAgICAgdGhpcy5vYmplY3RQb29sLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHRoaXMucGFyZW50TGlzdDsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gX2NbX2JdO1xuICAgICAgICAgICAgdGhpcy5vYmplY3RQb29sLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnRMaXN0ID0gW107XG4gICAgICAgIHRoaXMub3Blbkxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5wYXRoRmluZENvdW50ZXIrKztcbiAgICB9O1xuICAgIEFTdGFyUGF0aEZpbmRlci5wcm90b3R5cGUuZ2VuZXJhdGVQYXRoID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBub2RlO1xuICAgICAgICB2YXIgcGF0aCA9IG5ldyBQYXRoXzEuUGF0aCgpO1xuICAgICAgICB3aGlsZSAoY3VycmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBwYXRoLmFkZChjdXJyZW50LngsIGN1cnJlbnQueSk7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfTtcbiAgICBBU3RhclBhdGhGaW5kZXIucHJvdG90eXBlLmJsb2NrZWQgPSBmdW5jdGlvbiAoc3gsIHN5LCB4LCB5KSB7XG4gICAgICAgIGlmICghdGhpcy5tYXAubG9jYXRpb25EaXNjb3ZlcmVkKHgsIHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYXAuYmxvY2tlZCh0aGlzLm1vdmVyLCBudWxsLCBzeCwgc3ksIHgsIHksIHRoaXMuYXRUYXJnZXQoeCwgeSkpO1xuICAgIH07XG4gICAgQVN0YXJQYXRoRmluZGVyLnByb3RvdHlwZS5hdFRhcmdldCA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50eC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHR4ID0gdGhpcy50eFtpXTtcbiAgICAgICAgICAgIHZhciB0eSA9IHRoaXMudHlbaV07XG4gICAgICAgICAgICBpZiAodHggPj0geCAmJiB0eCA8IHggKyB0aGlzLm1vdmVyLmdldFRpbGVzV2lkdGgoKVxuICAgICAgICAgICAgICAgICYmIHR5ID49IHkgJiYgdHkgPCB5ICsgdGhpcy5tb3Zlci5nZXRUaWxlc0hlaWdodCgpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEFTdGFyUGF0aEZpbmRlci5wcm90b3R5cGUuZmluZFBhdGggPSBmdW5jdGlvbiAobW92ZXIsIHR4LCB0eSwgd2lkdGgsIGhlaWdodCwgbWF4KSB7XG4gICAgICAgIHR4ID0gTWF0aC5mbG9vcih0eCk7XG4gICAgICAgIHR5ID0gTWF0aC5mbG9vcih0eSk7XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgICAgICB0aGlzLm1vdmVyID0gbW92ZXI7XG4gICAgICAgIHRoaXMudHggPSBbXTtcbiAgICAgICAgdGhpcy50eSA9IFtdO1xuICAgICAgICAvLyBjZW50cmFsIHBvaW50IGZvciBoZXVyaXN0aWMgb3JkZXJpbmdcbiAgICAgICAgdGhpcy5jeCA9IHR4ICsgd2lkdGggLyAyO1xuICAgICAgICB0aGlzLmN5ID0gdHkgKyBoZWlnaHQgLyAyO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudHgucHVzaCh0eCArIGkpO1xuICAgICAgICAgICAgdGhpcy50eS5wdXNoKHR5KTtcbiAgICAgICAgICAgIGlmIChoZWlnaHQgPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50eC5wdXNoKHR4ICsgaSk7XG4gICAgICAgICAgICAgICAgdGhpcy50eS5wdXNoKHR5ICsgaGVpZ2h0IC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlaWdodCA+IDIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgaGVpZ2h0IC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50eC5wdXNoKHR4KTtcbiAgICAgICAgICAgICAgICB0aGlzLnR5LnB1c2godHkgKyBpKTtcbiAgICAgICAgICAgICAgICBpZiAod2lkdGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHgucHVzaCh0eCArIHdpZHRoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHkucHVzaCh0eSArIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50eC5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gemVybyBzaXplXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBEZXN0aW5hdGlvbnM6ICgke3R4fSwke3R5fSl4KCR7d2lkdGh9LCR7aGVpZ2h0fSkgPT4gWyR7dGhpcy50eH1dIHggWyR7dGhpcy50eX1dYClcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmFkZExvY2F0aW9uKG51bGwsIE1hdGguZmxvb3IobW92ZXIuZ2V0VGlsZU1hcFgoKSksIE1hdGguZmxvb3IobW92ZXIuZ2V0VGlsZU1hcFkoKSkpO1xuICAgICAgICB3aGlsZSAodGhpcy5vcGVuTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgYmVzdCA9IHRoaXMub3Blbkxpc3RbMF07XG4gICAgICAgICAgICB0aGlzLm9wZW5MaXN0LnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgIC8vIGlmIGJlc3QgaXMgdGhlIHRhcmdldCB0aGVuIHdlJ3ZlIGZvdW5kIGl0IVxuICAgICAgICAgICAgaWYgKHRoaXMuYXRUYXJnZXQoYmVzdC54LCBiZXN0LnkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVQYXRoKGJlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGRMb2NhdGlvbihiZXN0LCBiZXN0LnggKyAxLCBiZXN0LnkpO1xuICAgICAgICAgICAgdGhpcy5hZGRMb2NhdGlvbihiZXN0LCBiZXN0LnggLSAxLCBiZXN0LnkpO1xuICAgICAgICAgICAgdGhpcy5hZGRMb2NhdGlvbihiZXN0LCBiZXN0LngsIGJlc3QueSArIDEpO1xuICAgICAgICAgICAgdGhpcy5hZGRMb2NhdGlvbihiZXN0LCBiZXN0LngsIGJlc3QueSAtIDEpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRMaXN0LnB1c2goYmVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBBU3RhclBhdGhGaW5kZXIucHJvdG90eXBlLmFkZExvY2F0aW9uID0gZnVuY3Rpb24gKHBhcmVudCwgeCwgeSkge1xuICAgICAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICAgICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gICAgICAgIHZhciBzeCA9IHg7XG4gICAgICAgIHZhciBzeSA9IHk7XG4gICAgICAgIHZhciBkaXIgPSBBU3RhclBhdGhGaW5kZXIuTk9ORTtcbiAgICAgICAgaWYgKHBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBzeCA9IHBhcmVudC54O1xuICAgICAgICAgICAgc3kgPSBwYXJlbnQueTtcbiAgICAgICAgICAgIGlmIChzeSArIDEgPT0geSkge1xuICAgICAgICAgICAgICAgIGRpciA9IEFTdGFyUGF0aEZpbmRlci5OT1JUSF9UT19TT1VUSDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzeSAtIDEgPT0geSkge1xuICAgICAgICAgICAgICAgIGRpciA9IEFTdGFyUGF0aEZpbmRlci5TT1VUSF9UT19OT1JUSDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzeCArIDEgPT0geCkge1xuICAgICAgICAgICAgICAgIGRpciA9IEFTdGFyUGF0aEZpbmRlci5XRVNUX1RPX0VBU1Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3ggLSAxID09IHgpIHtcbiAgICAgICAgICAgICAgICBkaXIgPSBBU3RhclBhdGhGaW5kZXIuRUFTVF9UT19XRVNUO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5tYXAudmFsaWRMb2NhdGlvbih4LCB5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGl0J3MgaW4gdGhlIG9wZW4gbGlzdCBpZ25vcmVcbiAgICAgICAgaWYgKHRoaXMub3Blblt4ICsgKHkgKiB0aGlzLndpZHRoKV1bZGlyXSA9PSB0aGlzLnBhdGhGaW5kQ291bnRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZFt4ICsgKHkgKiB0aGlzLndpZHRoKV1bZGlyXSA9PSB0aGlzLnBhdGhGaW5kQ291bnRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIGl0J3MgYmxvY2tlZCBmb3IgYW55IHJlYXNvbiwgYWRkIGl0IHRvIHRoZSBjbG9zZWRcbiAgICAgICAgaWYgKHBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50LmRlcHRoID4gdGhpcy5tYXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlZFt4ICsgKHkgKiB0aGlzLndpZHRoKV1bZGlyXSA9IHRoaXMucGF0aEZpbmRDb3VudGVyO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMubWFwLmxvY2F0aW9uRGlzY292ZXJlZCh4LCB5KSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWRbeCArICh5ICogdGhpcy53aWR0aCldW2Rpcl0gPSB0aGlzLnBhdGhGaW5kQ291bnRlcjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ibG9ja2VkKHN4LCBzeSwgeCwgeSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkW3ggKyAoeSAqIHRoaXMud2lkdGgpXVtkaXJdID0gdGhpcy5wYXRoRmluZENvdW50ZXI7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlIGl0J3MgYSBwb3NzaWJsZSBzdGVwIGFkZCBpdCB0byB0aGUgb3BlblxuICAgICAgICB0aGlzLm9wZW5beCArICh5ICogdGhpcy53aWR0aCldW2Rpcl0gPSB0aGlzLnBhdGhGaW5kQ291bnRlcjtcbiAgICAgICAgdmFyIGR4ID0gTWF0aC5hYnModGhpcy5jeCAtIHgpO1xuICAgICAgICB2YXIgZHkgPSBNYXRoLmFicyh0aGlzLmN5IC0geSk7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVNYXBOb2RlKHgsIHksIHBhcmVudCwgKGR4ICogZHgpICsgKGR5ICogZHkpKTtcbiAgICAgICAgdmFyIGluZGV4ID0gQVN0YXJQYXRoRmluZGVyLmJpbmFyeVNlYXJjaCh0aGlzLm9wZW5MaXN0LCBub2RlLmgpO1xuICAgICAgICB0aGlzLm9wZW5MaXN0LnNwbGljZShpbmRleCwgMCwgbm9kZSk7XG4gICAgfTtcbiAgICBBU3RhclBhdGhGaW5kZXIuYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gKGFycmF5LCBoKSB7XG4gICAgICAgIHZhciBsbyA9IC0xLCBoaSA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKDEgKyBsbyA8IGhpKSB7XG4gICAgICAgICAgICB2YXIgbWkgPSBsbyArICgoaGkgLSBsbykgPj4gMSk7XG4gICAgICAgICAgICBpZiAoYXJyYXlbbWldLmggPiBoKSB7XG4gICAgICAgICAgICAgICAgaGkgPSBtaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvID0gbWk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpO1xuICAgIH07XG4gICAgLy8gb2JqZWN0IHBvb2wgYWNjZXNzb3IgLSBmcmVlIGlzIGRvbmUgaW4gYnVsa1xuICAgIEFTdGFyUGF0aEZpbmRlci5wcm90b3R5cGUuY3JlYXRlTWFwTm9kZSA9IGZ1bmN0aW9uICh4LCB5LCBwYXJlbnQsIGgpIHtcbiAgICAgICAgaWYgKHRoaXMub2JqZWN0UG9vbC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdmFyIG4gPSBuZXcgTWFwTm9kZV8xLk1hcE5vZGUoKTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0UG9vbC5wdXNoKG4pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5vYmplY3RQb29sWzBdO1xuICAgICAgICB0aGlzLm9iamVjdFBvb2wuc3BsaWNlKDAsIDEpO1xuICAgICAgICBub2RlLnggPSB4O1xuICAgICAgICBub2RlLnkgPSB5O1xuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgbm9kZS5oID0gaDtcbiAgICAgICAgaWYgKHBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLmRlcHRoID0gcGFyZW50LmRlcHRoICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuZGVwdGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgQVN0YXJQYXRoRmluZGVyLk5PUlRIX1RPX1NPVVRIID0gMDtcbiAgICBBU3RhclBhdGhGaW5kZXIuRUFTVF9UT19XRVNUID0gMTtcbiAgICBBU3RhclBhdGhGaW5kZXIuU09VVEhfVE9fTk9SVEggPSAyO1xuICAgIEFTdGFyUGF0aEZpbmRlci5XRVNUX1RPX0VBU1QgPSAzO1xuICAgIEFTdGFyUGF0aEZpbmRlci5OT05FID0gNDtcbiAgICByZXR1cm4gQVN0YXJQYXRoRmluZGVyO1xufSgpKTtcbmV4cG9ydHMuQVN0YXJQYXRoRmluZGVyID0gQVN0YXJQYXRoRmluZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1hcE5vZGUgPSB2b2lkIDA7XG52YXIgTWFwTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBOb2RlKCkge1xuICAgIH1cbiAgICByZXR1cm4gTWFwTm9kZTtcbn0oKSk7XG5leHBvcnRzLk1hcE5vZGUgPSBNYXBOb2RlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhdGggPSB2b2lkIDA7XG52YXIgU3RlcF8xID0gcmVxdWlyZShcIi4vU3RlcFwiKTtcbnZhciBQYXRoID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhdGgoKSB7XG4gICAgICAgIHRoaXMuc3RlcHMgPSBuZXcgQXJyYXkoKTtcbiAgICB9XG4gICAgUGF0aC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdGhpcy5zdGVwcy5zcGxpY2UoMCwgMCwgbmV3IFN0ZXBfMS5TdGVwKHgsIHkpKTtcbiAgICB9O1xuICAgIFBhdGgucHJvdG90eXBlLmdldExhc3RTdGVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGVwc1t0aGlzLnN0ZXBzLmxlbmd0aCAtIDFdO1xuICAgIH07XG4gICAgUGF0aC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5zdGVwc1swXTtcbiAgICAgICAgdGhpcy5zdGVwcy5zcGxpY2UoMCwgMSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICByZXR1cm4gUGF0aDtcbn0oKSk7XG5leHBvcnRzLlBhdGggPSBQYXRoO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0ZXAgPSB2b2lkIDA7XG52YXIgU3RlcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGVwKHgsIHkpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG4gICAgcmV0dXJuIFN0ZXA7XG59KCkpO1xuZXhwb3J0cy5TdGVwID0gU3RlcDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTERUS1dvcmxkID0gdm9pZCAwO1xudmFyIE1hcEVudGl0eV8xID0gcmVxdWlyZShcIi4vTWFwRW50aXR5XCIpO1xudmFyIE1hcExheWVyXzEgPSByZXF1aXJlKFwiLi9NYXBMYXllclwiKTtcbnZhciBNYXBMZXZlbF8xID0gcmVxdWlyZShcIi4vTWFwTGV2ZWxcIik7XG52YXIgTWFwV29ybGRfMSA9IHJlcXVpcmUoXCIuL01hcFdvcmxkXCIpO1xudmFyIExEVEtXb3JsZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTERUS1dvcmxkLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIExEVEtXb3JsZCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBMRFRLV29ybGQucHJvdG90eXBlLmluaXRPbkZpcnN0Q2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBMRFRLV29ybGQucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoZmlsZSwgbG9hZGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBsb2FkZXIoZmlsZSkudGhlbihmdW5jdGlvbiAoanNvbikge1xuICAgICAgICAgICAgX3RoaXMuZ3JpZFNpemUgPSBqc29uLmRlZmF1bHRHcmlkU2l6ZTtcbiAgICAgICAgICAgIHZhciB0aWxlc2V0ID0ganNvbi5kZWZzLnRpbGVzZXRzWzBdO1xuICAgICAgICAgICAgX3RoaXMudGlsZXNldFNjYW5saW5lID0gdGlsZXNldC5weFdpZCAvIHRpbGVzZXQudGlsZUdyaWRTaXplO1xuICAgICAgICAgICAgX3RoaXMudGlsZXNldFNpemUgPSB0aWxlc2V0LnRpbGVHcmlkU2l6ZTtcbiAgICAgICAgICAgIHZhciBsZXZlbHMgPSBqc29uLmxldmVscztcbiAgICAgICAgICAgIGlmIChqc29uLndvcmxkcyAmJiBqc29uLndvcmxkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV2ZWxzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGpzb24ud29ybGRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd29ybGQgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIGxldmVscyA9IGxldmVscy5jb25jYXQod29ybGQubGV2ZWxzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYXN5bmNMZXZlbHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGxldmVsRGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBsZXZlbCA9IG5ldyBNYXBMZXZlbF8xLk1hcExldmVsKF90aGlzLCBsZXZlbERhdGEuaWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgbGV2ZWwud29ybGRYID0gbGV2ZWxEYXRhLndvcmxkWDtcbiAgICAgICAgICAgICAgICBsZXZlbC53b3JsZFkgPSBsZXZlbERhdGEud29ybGRZO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gMCwgX2UgPSBsZXZlbERhdGEuZmllbGRJbnN0YW5jZXM7IF9kIDwgX2UubGVuZ3RoOyBfZCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZEluc3RhbmNlID0gX2VbX2RdO1xuICAgICAgICAgICAgICAgICAgICBsZXZlbC5maWVsZHNbZmllbGRJbnN0YW5jZS5fX2lkZW50aWZpZXJdID0gZmllbGRJbnN0YW5jZS5fX3ZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXJzID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGlmIChsZXZlbERhdGEubGF5ZXJJbnN0YW5jZXMpIC8vIGVtYmVkZGVkIGxheWVyc1xuICAgICAgICAgICAgICAgICAgICBsYXllcnMgPSBQcm9taXNlLnJlc29sdmUobGV2ZWxEYXRhKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsZXZlbERhdGEuZXh0ZXJuYWxSZWxQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVycyA9IGxvYWRlcihsZXZlbERhdGEuZXh0ZXJuYWxSZWxQYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gTERUSyBmaWxlIGZvcm1hdFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXN5bmNMZXZlbHMucHVzaChsYXllcnMudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBMRFRLV29ybGQubG9hZExheWVycyhsZXZlbCwgZGF0YS5sYXllckluc3RhbmNlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbC5sYXllcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwud2lkdGggPSBsZXZlbC5sYXllcnNbMF0ud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbC5oZWlnaHQgPSBsZXZlbC5sYXllcnNbMF0uaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwud2lkdGggPSBsZXZlbERhdGEucHhXaWQgLyBfdGhpcy5ncmlkU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsLmhlaWdodCA9IGxldmVsRGF0YS5weEhlaSAvIF90aGlzLmdyaWRTaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxldmVsc1tsZXZlbC5pZF0gPSBsZXZlbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0ganNvbi5sZXZlbHM7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsRGF0YSA9IF9jW19iXTtcbiAgICAgICAgICAgICAgICBfbG9vcF8xKGxldmVsRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYXN5bmNMZXZlbHMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBMRFRLV29ybGQubG9hZExheWVycyA9IGZ1bmN0aW9uIChsZXZlbCwgbGF5ZXJJbnN0YW5jZXMpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBsYXllckluc3RhbmNlc18xID0gbGF5ZXJJbnN0YW5jZXM7IF9pIDwgbGF5ZXJJbnN0YW5jZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBsYXllckRhdGEgPSBsYXllckluc3RhbmNlc18xW19pXTtcbiAgICAgICAgICAgIGlmIChsYXllckRhdGEuX190eXBlID09PSBcIkVudGl0aWVzXCIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gbGF5ZXJEYXRhLmVudGl0eUluc3RhbmNlczsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudGl0eURhdGEgPSBfYltfYV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRpdHkgPSBuZXcgTWFwRW50aXR5XzEuTWFwRW50aXR5KGxldmVsLCBlbnRpdHlEYXRhLnB4WzBdIC8gbGF5ZXJEYXRhLl9fZ3JpZFNpemUsIGVudGl0eURhdGEucHhbMV0gLyBsYXllckRhdGEuX19ncmlkU2l6ZSwgZW50aXR5RGF0YS53aWR0aCAvIGxheWVyRGF0YS5fX2dyaWRTaXplLCBlbnRpdHlEYXRhLmhlaWdodCAvIGxheWVyRGF0YS5fX2dyaWRTaXplLCBlbnRpdHlEYXRhLl9faWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9jID0gMCwgX2QgPSBlbnRpdHlEYXRhLmZpZWxkSW5zdGFuY2VzOyBfYyA8IF9kLmxlbmd0aDsgX2MrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkSW5zdGFuY2UgPSBfZFtfY107XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkuZmllbGRzW2ZpZWxkSW5zdGFuY2UuX19pZGVudGlmaWVyXSA9IGZpZWxkSW5zdGFuY2UuX192YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXZlbC5lbnRpdGllcy5wdXNoKGVudGl0eSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyID0gbmV3IE1hcExheWVyXzEuTWFwTGF5ZXIobGV2ZWwsIGxheWVyRGF0YS5fX2lkZW50aWZpZXIsIGxheWVyRGF0YS5fX2NXaWQsIGxheWVyRGF0YS5fX2NIZWkpO1xuICAgICAgICAgICAgICAgIHZhciBzY2FubGluZSA9IGxldmVsLndvcmxkLnRpbGVzZXRTY2FubGluZTtcbiAgICAgICAgICAgICAgICB2YXIgdGlsZVNpemUgPSBsZXZlbC53b3JsZC50aWxlc2V0U2l6ZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IDAsIF9mID0gbGF5ZXJEYXRhLmdyaWRUaWxlczsgX2UgPCBfZi5sZW5ndGg7IF9lKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbGUgPSBfZltfZV07XG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gTWF0aC5mbG9vcih0aWxlLnB4WzBdIC8gbGF5ZXJEYXRhLl9fZ3JpZFNpemUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IE1hdGguZmxvb3IodGlsZS5weFsxXSAvIGxheWVyRGF0YS5fX2dyaWRTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc0luZGV4ID0geCArICh5ICogbGF5ZXIud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHggPSBNYXRoLmZsb29yKHRpbGUuc3JjWzBdIC8gdGlsZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHkgPSBNYXRoLmZsb29yKHRpbGUuc3JjWzFdIC8gdGlsZVNpemUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGlsZUluZGV4ID0gKHR5ICogc2NhbmxpbmUpICsgdHg7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyLnRpbGVzW3Bvc0luZGV4XSA9IHRpbGVJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldmVsLmxheWVycy5zcGxpY2UoMCwgMCwgbGF5ZXIpO1xuICAgICAgICAgICAgICAgIGxldmVsLmxheWVyQnlOYW1lW2xheWVyLm5hbWVdID0gbGF5ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBMRFRLV29ybGQ7XG59KE1hcFdvcmxkXzEuTWFwV29ybGQpKTtcbmV4cG9ydHMuTERUS1dvcmxkID0gTERUS1dvcmxkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXBFbnRpdHkgPSB2b2lkIDA7XG52YXIgTWFwRW50aXR5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcEVudGl0eShsZXZlbCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgdHlwZSkge1xuICAgICAgICB0aGlzLmZpZWxkcyA9IHt9O1xuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIE1hcEVudGl0eS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IE1hcEVudGl0eShsZXZlbCwgdGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnR5cGUpO1xuICAgICAgICByZXN1bHQuZmllbGRzID0gX19hc3NpZ24oe30sIHRoaXMuZmllbGRzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIHJldHVybiBNYXBFbnRpdHk7XG59KCkpO1xuZXhwb3J0cy5NYXBFbnRpdHkgPSBNYXBFbnRpdHk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWFwTGF5ZXIgPSB2b2lkIDA7XG52YXIgTWFwTGF5ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFwTGF5ZXIobGV2ZWwsIG5hbWUsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLnRpbGVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudGlsZXMucHVzaCgwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBNYXBMYXllci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHgsIHksIHZhbHVlKSB7XG4gICAgICAgIGlmICgoeCA8IDApIHx8ICh5IDwgMCkgfHwgKHggPj0gdGhpcy53aWR0aCkgfHwgKHkgPj0gdGhpcy5oZWlnaHQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBvc0luZGV4ID0geCArICh5ICogdGhpcy53aWR0aCk7XG4gICAgICAgIHRoaXMudGlsZXNbcG9zSW5kZXhdID0gdmFsdWU7XG4gICAgfTtcbiAgICBNYXBMYXllci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgaWYgKCh4IDwgMCkgfHwgKHkgPCAwKSB8fCAoeCA+PSB0aGlzLndpZHRoKSB8fCAoeSA+PSB0aGlzLmhlaWdodCkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwb3NJbmRleCA9IHggKyAoeSAqIHRoaXMud2lkdGgpO1xuICAgICAgICByZXR1cm4gdGhpcy50aWxlc1twb3NJbmRleF07XG4gICAgfTtcbiAgICBNYXBMYXllci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IE1hcExheWVyKGxldmVsLCB0aGlzLm5hbWUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0LnRpbGVzW2ldID0gdGhpcy50aWxlc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIE1hcExheWVyO1xufSgpKTtcbmV4cG9ydHMuTWFwTGF5ZXIgPSBNYXBMYXllcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWFwTGV2ZWwgPSB2b2lkIDA7XG52YXIgTWFwV29ybGRfMSA9IHJlcXVpcmUoXCIuL01hcFdvcmxkXCIpO1xudmFyIE1hcExldmVsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hcExldmVsKHdvcmxkLCBpZCkge1xuICAgICAgICB0aGlzLmxheWVycyA9IFtdO1xuICAgICAgICB0aGlzLmxheWVyQnlOYW1lID0ge307XG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSBbXTtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB7fTtcbiAgICAgICAgdGhpcy53b3JsZFggPSAwO1xuICAgICAgICB0aGlzLndvcmxkWSA9IDA7XG4gICAgICAgIHRoaXMud29ybGQgPSB3b3JsZDtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgIH1cbiAgICBNYXBMZXZlbC5wcm90b3R5cGUuZW50aXRpZXNPZlR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5maWx0ZXIoZnVuY3Rpb24gKGVudGl0eSkgeyByZXR1cm4gZW50aXR5LnR5cGUgPT09IHR5cGU7IH0pO1xuICAgIH07XG4gICAgTWFwTGV2ZWwucHJvdG90eXBlLmZpcnN0RW50aXR5T2ZUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50aXRpZXMuZmluZChmdW5jdGlvbiAoZW50aXR5KSB7IHJldHVybiBlbnRpdHkudHlwZSA9PT0gdHlwZTsgfSk7XG4gICAgfTtcbiAgICBNYXBMZXZlbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgd29ybGRDb3B5ID0gbmV3IE1hcFdvcmxkXzEuTWFwV29ybGQoKTtcbiAgICAgICAgd29ybGRDb3B5LmdyaWRTaXplID0gdGhpcy53b3JsZC5ncmlkU2l6ZTtcbiAgICAgICAgd29ybGRDb3B5LmxvYWRlZCA9IHRoaXMud29ybGQubG9hZGVkO1xuICAgICAgICB3b3JsZENvcHkudGlsZXNldFNjYW5saW5lID0gdGhpcy53b3JsZC50aWxlc2V0U2NhbmxpbmU7XG4gICAgICAgIHdvcmxkQ29weS50aWxlc2V0U2l6ZSA9IHRoaXMud29ybGQudGlsZXNldFNpemU7XG4gICAgICAgIHZhciBsZXZlbENvcHkgPSBuZXcgTWFwTGV2ZWwod29ybGRDb3B5LCBpZCk7XG4gICAgICAgIGxldmVsQ29weS53aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgIGxldmVsQ29weS5oZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgbGV2ZWxDb3B5LndvcmxkWCA9IHRoaXMud29ybGRYO1xuICAgICAgICBsZXZlbENvcHkud29ybGRZID0gdGhpcy53b3JsZFk7XG4gICAgICAgIGxldmVsQ29weS5maWVsZHMgPSBfX2Fzc2lnbih7fSwgdGhpcy5maWVsZHMpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5sYXllcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSBfYVtfaV07XG4gICAgICAgICAgICB2YXIgY29weSA9IGxheWVyLmNvcHkobGV2ZWxDb3B5KTtcbiAgICAgICAgICAgIGxldmVsQ29weS5sYXllcnMucHVzaChjb3B5KTtcbiAgICAgICAgICAgIGxldmVsQ29weS5sYXllckJ5TmFtZVtjb3B5Lm5hbWVdID0gY29weTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gdGhpcy5lbnRpdGllczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSBfY1tfYl07XG4gICAgICAgICAgICB2YXIgY29weSA9IGVudGl0eS5jb3B5KGxldmVsQ29weSk7XG4gICAgICAgICAgICBsZXZlbENvcHkuZW50aXRpZXMucHVzaChjb3B5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGV2ZWxDb3B5O1xuICAgIH07XG4gICAgcmV0dXJuIE1hcExldmVsO1xufSgpKTtcbmV4cG9ydHMuTWFwTGV2ZWwgPSBNYXBMZXZlbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXBXb3JsZCA9IHZvaWQgMDtcbnZhciBNYXBXb3JsZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXBXb3JsZCgpIHtcbiAgICAgICAgdGhpcy5sZXZlbHMgPSB7fTtcbiAgICAgICAgdGhpcy5ncmlkU2l6ZSA9IDA7XG4gICAgICAgIHRoaXMudGlsZXNldFNjYW5saW5lID0gMDtcbiAgICAgICAgdGhpcy50aWxlc2V0U2l6ZSA9IDA7XG4gICAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBNYXBXb3JsZDtcbn0oKSk7XG5leHBvcnRzLk1hcFdvcmxkID0gTWFwV29ybGQ7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1hcEVudGl0eSA9IGV4cG9ydHMuTWFwTGF5ZXIgPSBleHBvcnRzLk1hcExldmVsID0gZXhwb3J0cy5NYXBXb3JsZCA9IGV4cG9ydHMuTERUS1dvcmxkID0gZXhwb3J0cy5TdGVwID0gZXhwb3J0cy5QYXRoID0gZXhwb3J0cy5BU3RhclBhdGhGaW5kZXIgPSBleHBvcnRzLktleXMgPSBleHBvcnRzLkJMVUUgPSBleHBvcnRzLlJFRCA9IGV4cG9ydHMuR1JFRU4gPSBleHBvcnRzLkJMQUNLID0gZXhwb3J0cy5XSElURSA9IGV4cG9ydHMuc2V0U291bmRPbiA9IGV4cG9ydHMuc2V0TXVzaWNPbiA9IGV4cG9ydHMuaXNTb3VuZE9uID0gZXhwb3J0cy5pc011c2ljT24gPSBleHBvcnRzLnN0YXJ0R2FtZSA9IHZvaWQgMDtcbnZhciBHdXRlXzEgPSByZXF1aXJlKFwiLi9HdXRlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3RhcnRHYW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBHdXRlXzEuc3RhcnRHYW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNNdXNpY09uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBHdXRlXzEuaXNNdXNpY09uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNTb3VuZE9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBHdXRlXzEuaXNTb3VuZE9uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2V0TXVzaWNPblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gR3V0ZV8xLnNldE11c2ljT247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXRTb3VuZE9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBHdXRlXzEuc2V0U291bmRPbjsgfSB9KTtcbnZhciBHcmFwaGljc18xID0gcmVxdWlyZShcIi4vR3JhcGhpY3NcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXSElURVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gR3JhcGhpY3NfMS5XSElURTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJMQUNLXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBHcmFwaGljc18xLkJMQUNLOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR1JFRU5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEdyYXBoaWNzXzEuR1JFRU47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSRURcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEdyYXBoaWNzXzEuUkVEOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQkxVRVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gR3JhcGhpY3NfMS5CTFVFOyB9IH0pO1xudmFyIEtleXNfMSA9IHJlcXVpcmUoXCIuL0tleXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJLZXlzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBLZXlzXzEuS2V5czsgfSB9KTtcbnZhciBBU3RhclBhdGhGaW5kZXJfMSA9IHJlcXVpcmUoXCIuL3BhdGgvQVN0YXJQYXRoRmluZGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQVN0YXJQYXRoRmluZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBU3RhclBhdGhGaW5kZXJfMS5BU3RhclBhdGhGaW5kZXI7IH0gfSk7XG52YXIgUGF0aF8xID0gcmVxdWlyZShcIi4vcGF0aC9QYXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGF0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gUGF0aF8xLlBhdGg7IH0gfSk7XG52YXIgU3RlcF8xID0gcmVxdWlyZShcIi4vcGF0aC9TdGVwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RlcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU3RlcF8xLlN0ZXA7IH0gfSk7XG52YXIgTERUS1dvcmxkXzEgPSByZXF1aXJlKFwiLi90aWxlbWFwcy9MRFRLV29ybGRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMRFRLV29ybGRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIExEVEtXb3JsZF8xLkxEVEtXb3JsZDsgfSB9KTtcbnZhciBNYXBXb3JsZF8xID0gcmVxdWlyZShcIi4vdGlsZW1hcHMvTWFwV29ybGRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNYXBXb3JsZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFwV29ybGRfMS5NYXBXb3JsZDsgfSB9KTtcbnZhciBNYXBMZXZlbF8xID0gcmVxdWlyZShcIi4vdGlsZW1hcHMvTWFwTGV2ZWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNYXBMZXZlbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFwTGV2ZWxfMS5NYXBMZXZlbDsgfSB9KTtcbnZhciBNYXBMYXllcl8xID0gcmVxdWlyZShcIi4vdGlsZW1hcHMvTWFwTGF5ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNYXBMYXllclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFwTGF5ZXJfMS5NYXBMYXllcjsgfSB9KTtcbnZhciBNYXBFbnRpdHlfMSA9IHJlcXVpcmUoXCIuL3RpbGVtYXBzL01hcEVudGl0eVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1hcEVudGl0eVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFwRW50aXR5XzEuTWFwRW50aXR5OyB9IH0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==